returns information about this applet   |||   get applet info
returns information about the parameters that are understood by this applet   |||   get parameter info
requests that this applet be resized   |||   resize
requests that the argument string be displayed in the " status window "   |||   show status
creates an audio clip   |||   get audio clip
finds all the keys of the streams in this applet context   |||   get stream keys
starts playing this audio clip   |||   play
creates a context for the compositing operation   |||   create context
determines whether the specified object is equal to this alpha composite   |||   equals
consumes this event , if this event can be consumed   |||   consume
returns whether this event has been consumed   |||   is consumed
adds adjustment - listener - a with adjustment - listener - b and returns the resulting multicast listener   |||   add
handles the adjustment value changed event by invoking the adjustment value changed methods on listener - a and listener - b   |||   adjustment value changed
handles the input method text changed event by invoking the input method text changed methods on listener - a and listener - b   |||   input method text changed
handles the mouse clicked event by invoking the mouse clicked methods on listener - a and listener - b   |||   mouse clicked
removes the old hierarchy - bounds - listener from hierarchy - bounds - listener - l and returns the resulting multicast listener   |||   remove
handles the window deiconfied event by invoking the window deiconified methods on listener - a and listener - b   |||   window deiconified
handles the window state changed event by invoking the window state changed methods on listener - a and listener - b   |||   window state changed
returns true if this object is identical to the specified object   |||   equals
returns an awt key stroke which represents the stroke which generated a given key event   |||   get awtk ey stroke for event
returns the modifier keys for this awt key stroke   |||   get modifiers
returns the current dash phase   |||   get dash phase
get the accessible name of this object   |||   get accessible name
returns the command name of the action event fired by this button   |||   get action command
returns an array of all the action listeners registered on this button   |||   get action listeners
gets the label of this button   |||   get label
returns a string representing the state of this button   |||   param string
flips to the component that was added to this layout with the specified name , using add layout component   |||   show
fire accessible property change events when the state of the toggle button changes   |||   item state changed
adds the specified item listener to receive item events from this check box   |||   add item listener
determines whether the state of this check box menu item is " on " or " off "   |||   get state
returns a string representing the state of this choice menu   |||   param string
removes all items from the choice menu   |||   remove all
sets the selected item in this choice menu to be the item whose name is equal to the specified string   |||   select
returns the alpha component in the range 0 - 255   |||   get alpha
returns the blue component in the range 0 - 255 in the default srgb space   |||   get blue
returns the accessible child , if one exists , contained at the local coordinate point   |||   get accessible at
gets the accessible component associated with this object if one exists   |||   get accessible component
gets the accessible name of this object   |||   get accessible name
gets the font of this object   |||   get font
determines if the object is showing   |||   is showing
determines if the object is visible   |||   is visible
sets the enabled state of the object   |||   set enabled
adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes   |||   add hierarchy bounds listener
adds the specified input method listener to receive input method events from this component   |||   add input method listener
creates a volatile off - screen drawable image , with the given capabilities   |||   create volatile image
returns the alignment along the y axis   |||   get alignment y
returns an array of all the input method listeners registered on this component   |||   get input method listeners
stores the x , y origin of this component into " return value " rv and return rv   |||   get location
gets the name of the component   |||   get name
returns the current x coordinate of the components origin   |||   get x
deprecated as of jdk version 1 1 , replaced by set visibleboolean   |||   hide
determines whether this component is displayable   |||   is displayable
prints a listing of this component to the standard system output stream system out   |||   list
deprecated as of jdk version 1 1 , replaced by get preferred size   |||   preferred size
removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component   |||   remove hierarchy listener
removes the specified mouse listener so that it no longer receives mouse events from this component   |||   remove mouse listener
requests that this component get the input focus , and that this component ' s top - level ancestor become the focused window   |||   request focus
sets the focusable state of this component to the specified value   |||   set focusable
sets whether focus traversal keys are enabled for this component   |||   set focus traversal keys enabled
sets the foreground color of this component   |||   set foreground
resizes this component so that it has width d width and height d height   |||   set size
resizes this component so that it has width and height height   |||   set size
composes the two source raster objects and places the result in the destination writable raster   |||   compose
invoked when a component has been added to the container   |||   component added
adds the specified component to the end of this container   |||   add
adds the specified component to this container at the specified index   |||   add impl
gets all the components in this container   |||   get components
returns an array of all the container listeners registered on this container   |||   get container listeners
checks if the component is contained in the component hierarchy of this container   |||   is ancestor of
makes this container undisplayable by removing its connection to its native screen resource   |||   remove notify
sets whether this container is the root of a focus traversal cycle   |||   set focus cycle root
determines whether a component is an acceptable choice as the new focus owner   |||   accept
sets whether this container order focus traversal policy transfers focus down - cycle implicitly   |||   set implicit down cycle traversal
returns the name of this cursor   |||   get name
returns the type for this cursor   |||   get type
prints a file with the native desktop printing facility , using the associated application ' s print command   |||   print
returns the modality type of this dialog   |||   get modality type
specifies whether this dialog should be modal   |||   set modal
deprecated as of jdk version 1 5 , replaced by set visibleboolean   |||   show
if this window is visible , sends this window to the back and may cause it to lose focus or activation if it is the focused or active window   |||   to back
returns the width of this dimension in double precision   |||   get width
returns the bit depth of the display , in bits per pixel   |||   get bit depth
returns the refresh rate of the display , in hertz   |||   get refresh rate
note : the event class is obsolete and is available only for backwards compatibility   |||   meta down
returns the timestamp of the most recent event that had a timestamp , and that was dispatched from the event queue associated with the calling thread   |||   get most recent event time
returns whether the file dialog allows the multiple file selection   |||   is multiple mode
enables or disables multiple file selection for the file dialog   |||   set multiple mode
gets the alignment for this layout   |||   get alignment
sets the alignment for this layout   |||   set alignment
sets the horizontal gap between components and between the components and the borders of the container   |||   set hgap
indicates whether or not this font can display the text specified by the iter starting at start and ending at limit   |||   can display up to
returns a font appropriate to the attributes   |||   get font
returns the font face name of this font   |||   get font name
returns the bounds for the character with the maximum bounds as defined in the specified font render context   |||   get max char bounds
returns the point size of this font in float value   |||   get size 2 d
returns a copy of the transform associated with this font   |||   get transform
returns a new glyph vector object , performing full layout of the text if possible   |||   layout glyph vector
returns the total advance width for showing the specified array of bytes in this font   |||   bytes width
deprecated as of jdk version 1 1 1 , replaced by get max descent   |||   get max decent
returns the bounds of the characters indexed in the specified character iterator in the specified graphics context   |||   get string bounds
returns the total advance width for showing the specified string in this font   |||   string width
disables or enables decorations for this frame   |||   set undecorated
creates and returns a paint context used to generate a linear color gradient pattern   |||   create context
clears the specified rectangle by filling it with the background color of the current drawing surface   |||   clear rect
draws the outline of a polygon defined by the specified polygon object   |||   draw polygon
draws the outline of the specified rectangle   |||   draw rect
fills a closed polygon defined by arrays of x and y coordinates   |||   fill polygon
fills the specified rectangle   |||   fill rect
disposes of this graphics context once it is no longer referenced   |||   finalize
gets the current clipping area   |||   get clip
sets the values of an arbitrary number of preferences for the rendering algorithms   |||   add rendering hints
sets the value of a single preference for the rendering algorithms   |||   set rendering hint
overwrites the transform in the graphics2d context   |||   set transform
concatenates the current graphics2d transform with a shearing transform   |||   shear
returns the buffering capabilities of this graphics configuration   |||   get buffer capabilities
this method returns the number of bytes available in accelerated memory on this device   |||   get available accelerated memory
returns the current display mode of this graphics device   |||   get display mode
returns the window object representing the full - screen window if the device is in full - screen mode   |||   get full screen window
returns the type of this graphics device   |||   get type
returns true if this graphics device supports low - level display changes   |||   is display change supported
returns a graphics2d object for rendering into the specified buffered image   |||   create graphics
returns the point where windows should be centered   |||   get center point
creates a copy of this grid bag constraint   |||   clone
determines column widths and row heights for the layout grid   |||   get layout dimensions
fills in an instance of grid bag layout info for the current set of managed children   |||   get layout info
this method is obsolete and supplied for backwards compatibility only ; new code should call get layout info instead   |||   get layout info
determines which cell in the layout grid contains the point specified by x , y   |||   location
retrieves the constraints for the specified component   |||   lookup constraints
gets a property of this image by name   |||   get property
specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes   |||   get min page
specifies the destination printer for jobs using these attributes   |||   set printer
adds a key event post processor to this keyboard focus manager ' s post - processor chain   |||   add key event post processor
clears the global focus owner at both the java and native levels   |||   clear global focus owner
moves the focus down one focus traversal cycle from the current focus owner , if and only if the current focus owner is a container that is a focus cycle root   |||   down focus cycle
called by the awt to notify the keyboard focus manager that it should delay dispatching of key events until the specified component becomes the focus owner   |||   enqueue key events
focuses the component before the current focus owner   |||   focus previous component
calculates the minimum size dimensions for the specified container , given the components it contains   |||   minimum layout size
returns a copy of the end point of the gradient axis   |||   get end point
get the foreground color of this object   |||   get foreground
set the enabled state of the object   |||   set enabled
clears the selection in the object , so that nothing in the object is selected   |||   clear accessible selection
adds the specified item listener to receive item events from this list   |||   add item listener
gets the number of items in the list   |||   get item count
gets the number of visible lines in this list   |||   get rows
deprecated as of jdk version 1 1 , replaced by get minimum sizeint   |||   minimum size
returns the parameter string representing the state of this scrolling list   |||   param string
removes the specified item listener so that it no longer receives item events from this list   |||   remove item listener
calculates and returns the bitwise inclusive or of the status of all media with the specified identifier that are tracked by this media tracker   |||   status id
creates the menu ' s peer   |||   add notify
get the number of items in this menu   |||   get item count
removes the specified menu item from this menu   |||   remove
gets the specified menu   |||   get menu
checks whether this menu item is enabled   |||   is enabled
sets the command name of the action event that is fired by this menu item   |||   set action command
returns the number of accessible children currently selected   |||   get accessible selection count
resizes this object   |||   set size
gets the font used for this menu component   |||   get font
gets the name of the menu component   |||   get name
processes events occurring on this menu component   |||   process event
returns a representation of this menu component as a string   |||   to string
creates and returns a copy of this page attributes   |||   clone
specifies whether pages using these attributes will be rendered in color or monochrome   |||   set color
sets the print orientation for pages using these attributes to the default   |||   set orientation requested to default
sets the printer resolution for pages using these attributes to the default   |||   set printer resolution to default
sets the location of the point to the specified location   |||   set location
gets the bounding box of this polygon   |||   get bounds
ends the print job and does any necessary cleanup   |||   end
returns the dimensions of the page in pixels   |||   get page dimension
returns a copy of the center point of the radial gradient   |||   get center point
returns the height of the bounding rectangle in double precision   |||   get height
determines where the specified coordinates lie with respect to this rectangle2d   |||   outcode
returns a string representing this rectangle and its values   |||   to string
creates an image containing pixels read from the screen   |||   create screen capture
sets the number of milliseconds this robot sleeps after generating an event   |||   set auto delay
get the accessible value of this object   |||   get current accessible value
gets the unit increment for this scrollbar   |||   get unit increment
processes adjustment events occurring on this scrollbar by dispatching them to any registered adjustment listener objects   |||   process adjustment event
sets the minimum value of this scroll bar   |||   set minimum
sets the value of this scroll bar to the specified value   |||   set value
sets the value is adjusting property   |||   set value is adjusting
returns the scroll pane adjustable object which represents the state of the horizontal scrollbar   |||   get ha djustable
returns a string representing the state of this scroll pane   |||   param string
adds the specified adjustment listener to receive adjustment events from this scroll pane adjustable   |||   add adjustment listener
this method should not be called by user code   |||   set minimum
updates the splash window with current contents of the overlay image   |||   update
adds a tray icon to the system tray   |||   add
adds a property change listener to the list of listeners for the specific property   |||   add property change listener
returns the size , in pixels , of the space that a tray icon will occupy in the system tray   |||   get tray icon size
returns the accessible context associated with this text area   |||   get accessible context
deprecated as of jdk version 1 1 , replaced by get minimum sizeint , int   |||   minimum size
returns a string representing the state of this text area   |||   param string
gets the state set of the text component   |||   get accessible state set
returns the number of characters valid indicies   |||   get char count
processes events on this text component   |||   process event
processes text events occurring on this text component by dispatching them to any registered text listener objects   |||   process text event
sets the selection start for this text component to the specified position   |||   set selection start
adds the specified action listener to receive action events from this text field   |||   add action listener
gets the accessible context associated with this text field   |||   get accessible context
returns an array of all the action listeners registered on this textfield   |||   get action listeners
processes action events occurring on this text field by dispatching them to any registered action listener objects   |||   process action event
processes events on this text field   |||   process event
reports whether events from extra mouse buttons are allowed to be processed and posted into event queue   |||   are extra mouse buttons enabled
creates this toolkit ' s implementation of frame using the specified peer interface   |||   create frame
creates this toolkit ' s implementation of label using the specified peer interface   |||   create label
returns the supported cursor dimension which is closest to the desired sizes   |||   get best cursor size
gets the default toolkit   |||   get default toolkit
returns whether the given locking key on the keyboard is currently in its " on " state   |||   get locking key state
determines which modifier key is the appropriate accelerator key for menu shortcuts   |||   get menu shortcut key mask
returns whether the given modality type is supported by this toolkit   |||   is modality type supported
displays a popup message near the tray icon   |||   display message
returns the value of the auto - size property   |||   is image auto size
removes the specified mouse listener   |||   remove mouse listener
adds the specified window listener to receive window events from this window   |||   add window listener
returns the modal exclusion type of this window   |||   get modal exclusion type
returns the opacity of the window   |||   get opacity
returns an array of all windows created by this application that have no owner   |||   get ownerless windows
causes this window to be sized to fit the preferred size and layouts of its subcomponents   |||   pack
sets whether this window should receive focus on subsequently being shown with a call to set visibletrue , or being moved to the front with a call to to front   |||   set auto request focus
sets the location of the window relative to the specified component according to the following scenarios   |||   set location relative to
sets the type of the window   |||   set type
transforms a color value assumed to be in the cs ciexyz conversion color space into this color space   |||   from ciexyz
returns the maximum normalized color component value for the specified component   |||   get max value
returns the name of the component given the component index   |||   get name
returns the number of components of this color space   |||   get num components
returns a particular tagged data element from the profile as a byte array   |||   get data
constructs an icc profile corresponding to the data in a file   |||   get instance
write this icc profile to an output stream   |||   write
returns the name of this clipboard object   |||   get name
returns true if the data flavor specified represents a remote object   |||   is flavor remote object type
returns whether the string representation of the mime type passed in is equivalent to the mime type of this data flavor   |||   is mime type equal
does the data flavor represent a java io input stream ?   |||   is representation class input stream
returns whether the representation class for this data flavor is java io reader or a subclass thereof   |||   is representation class reader
sets the human presentable name for the data format that this data flavor represents   |||   set human presentable name
encodes a mime type for use as a string native   |||   encode java mimet ype
this method returns the insets describing the autoscrolling region or border relative to the geometry of the implementing component   |||   get autoscroll insets
returns the component associated with this drag gesture event   |||   get component
starts the drag operation given the cursor for this drag operation and the transferable representing the source data for this drag operation   |||   start drag
this method returns the first event in the series of events that initiated the drag and drop operation   |||   get trigger event
reset the recognizer , if its currently recognizing a gesture , ignore it   |||   reset recognizer
this method sets the permitted source drag actions for this drag and drop operation   |||   set source actions
creates a new drag gesture recognizer that implements the default abstract subclass of drag gesture recognizer for this drag source , and sets the specified component and drag gesture listener on the newly created object   |||   create default drag gesture recognizer
gets all the drag source listeners registered with this drag source   |||   get drag source listeners
reports whether or not drag image support is available on the underlying platform   |||   is drag image supported
calls drag over on the drag source listeners registered with this drag source context and with the associated drag source , and passes them the specified drag source drag event   |||   drag over
returns the current drag cursor   |||   get cursor
this method returns an int representing the current state of the input device modifiers associated with the user ' s gesture   |||   get gesture modifiers
this method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred , or zero if the cursor location is not specified for this event   |||   get y
cause autoscroll to occur   |||   action performed
adds a new drop target listener unicast source   |||   add drop target listener
clear autoscrolling   |||   clear autoscroll
calls drag exit on the registered drop target listener and passes it the specified drop target event   |||   drag exit
calls drag over on the registered drop target listener and passes it the specified drop target drag event   |||   drag over
gets the flavor map associated with this drop target   |||   get flavor map
this method signals that the drop is completed and if it was successful or not   |||   drop complete
get the available data flavors of the transferable operand of this operation   |||   get current data flavors
get the transferable proxy operand of this operation   |||   get transferable
reject the drag   |||   reject drag
returns an object which represents the data provided by the encapsulated transferable for the requested data flavor   |||   get transfer data
accepts the drag   |||   accept drag
this method returns the transferable object that represents the data associated with the current drag operation   |||   get transferable
accept the drop , using the specified action   |||   accept drop
this method returns a point indicating the cursor ' s current location in the component ' s coordinates   |||   get location
returns the modifier keys held down during this action event   |||   get modifiers
invoked when the value of the adjustable has changed   |||   adjustment value changed
invoked when an event is dispatched in the awt   |||   event dispatched
forwards the awt event to the listener delegate   |||   event dispatched
returns the originator of the event   |||   get container
returns a bitmask which indicates the types of hierarchy changed events represented in this event object   |||   get change flags
a method to obtain a mask for any existing mouse button   |||   get mask for button
returns a string describing the extended modifier keys and mouse buttons , such as " shift " , " button1 " , or " ctrl+ shift "   |||   get modifiers ex text
returns the integer key code associated with the key in this event   |||   get key code
invoked when a window is changed from a normal to a minimized state   |||   window iconified
invoked when window state is changed   |||   window state changed
returns the x - component of the advance of the glyph   |||   get advance x
returns the left top side bearing of the glyph   |||   get lsb
returns the raw glyph type code   |||   get type
returns the justification information for the glyph at the specified index into this glyph vector   |||   get glyph justification info
returns the transform of the specified glyph within this glyph vector   |||   get glyph transform
assigns default positions to each glyph in this glyph vector   |||   perform default layout
returns the position of the strike - through line relative to the baseline   |||   get strikethrough offset
returns the position of the underline relative to the baseline   |||   get underline offset
returns a contextual shaper for the provided unicode ranges   |||   get contextual shaper
returns a hash code for this shaper   |||   hash code
creates a hit on the trailing edge of the character at the specified char index   |||   trailing
renders this text layout at the specified location in the specified graphics2d context   |||   draw
returns the offsets array for the baselines used for this text layout   |||   get baseline offsets
returns the hit for the next caret to the right bottom ; if there is no such hit , returns null   |||   get next right hit
returns true if this text layout has a left - to - right base direction or false if it has a right - to - left base direction   |||   is left to right
returns true if this affine transform represents the same affine coordinate transform as the specified argument   |||   equals
returns a transform that rotates coordinates by the specified number of quadrants around the specified anchor point   |||   get quadrant rotate instance
returns a transform that rotates coordinates around an anchor point   |||   get rotate instance
returns the x coordinate scaling element m00 of the 3x3 affine transformation matrix   |||   get scale x
sets this transform to the inverse of itself   |||   invert
concatenates this transform with a transform that rotates coordinates by the specified number of quadrants around the specified anchor point   |||   quadrant rotate
sets this transform to the matrix specified by the 6 double precision values   |||   set transform
concatenates this transform with a shearing transformation   |||   shear
transforms an array of floating point coordinates by this transform and stores the results into an array of doubles   |||   transform
returns the x coordinate of the upper - left corner of the framing rectangle in double precision   |||   get x
determines whether or not the specified point is inside the boundary of the arc   |||   contains
creates a new area object that contains the same geometry as this area transformed by the specified affine transform   |||   create transformed area
tests whether this area is rectangular in shape   |||   is rectangular
subtracts the shape of the specified area from the shape of this area   |||   subtract
returns the x coordinate of the second control point in double precision   |||   get ctrl x 2
returns the y coordinate of the start point in double precision   |||   get y 1
returns the winding rule for determining the interior of the path   |||   get winding rule
sets the location of the end points of this line2d to the specified double coordinates   |||   set line
tests if the interior of this line2d entirely contains the specified rectangle2d   |||   contains
tests if the specified line segment intersects this line segment   |||   intersects line
returns the square of the distance from a point to this line segment   |||   pt seg dist sq
appends the geometry of the specified shape object to the path , possibly connecting the new geometry to the existing path segments with a line segment   |||   append
tests if the specified rectangular area is entirely inside the closed boundary of the specified path iterator   |||   contains
tests if the interior of the specified path iterator intersects the interior of a specified set of rectangular coordinates   |||   intersects
creates a new object of the same class and with the same contents as this object   |||   clone
returns the distance from this point2d to a specified point2d   |||   distance
returns the hashcode for this point2d   |||   hash code
returns the x coordinate of the start point in double in precision   |||   get x 1
sets the location of the end points and control point of this curve to the specified double coordinates   |||   set curve
returns an iteration object that defines the boundary of the shape of this quad curve2d   |||   get path iterator
adds the point2d object pt to this rectangle2d   |||   add
unions the pair of source rectangle2d objects and puts the result into the specified destination rectangle2d object   |||   union
sets the framing rectangle of this shape to be the specified rectangle2d   |||   set frame
gets the height of the arc that rounds off the corners   |||   get arc height
gets the width of the arc that rounds off the corners   |||   get arc width
notifies the input context that a client component has been removed from its containment hierarchy , or that input method support has been disabled for the component   |||   remove notify
activates the input method for immediate input processing   |||   activate
returns the current input locale   |||   get locale
transforms the source buffered image and stores the results in the destination buffered image   |||   filter
transforms the raster using the matrix specified in the constructor   |||   filter
returns the location of the corresponding destination point given a point in the source raster   |||   get point 2 d
creates a new banded sample model with the specified width and height   |||   create compatible sample model
returns all samples for the specified pixel in an int array   |||   get pixel
computes an arbitrary rectangular region of the buffered image and copies it into a specified writable raster   |||   copy data
returns the minimum x coordinate of this buffered image   |||   get min x
returns the minimum y coordinate of this buffered image   |||   get min y
returns the object that produces the pixels for the image   |||   get source
returns tile tilex , tiley   |||   get tile
returns a string representation of this buffered image object and its values   |||   to string
creates a zeroed destination raster with the correct size and number of bands , given this source   |||   create compatible dest raster
returns the array of icc profiles used to construct this color convert op   |||   get iccp rofiles
returns a data element array representation of a pixel in this color model , given an array of normalized color / alpha components   |||   get data elements
returns a data element array representation of a pixel in this color model , given an array of unnormalized color / alpha components   |||   get data elements
returns a data element array representation of a pixel in this color model , given an integer pixel representation in the default rgb color model   |||   get data elements
returns the green color component for the specified pixel , scaled from 0 to 255 in the default rgb color space , srgb   |||   get green
returns the color / alpha components of the pixel in the default rgb color model format   |||   get rgb
returns true if raster is compatible with this color model and false if it is not   |||   is compatible raster
returns the rendering hints for this op   |||   get rendering hints
determine whether the delivered byte pixels intersect the region to be extracted and passes through only that subset of pixels that appear in the output region   |||   set pixels
returns the data type of this data buffer   |||   get data type
returns the size in bits of the data type , given a datatype tag   |||   get data type size
returns the requested data array element from the specified bank as an integer   |||   get elem
sets the requested data array element in the specified bank from the given double   |||   set elem double
sets the requested data array element in the first default bank from the given float   |||   set elem float
returns the requested data array element from the first default bank as an int   |||   get elem
sets the requested data array element in the specified bank to the given int   |||   set elem
sets the requested data array element in the specified bank to the integer value i   |||   set elem
adds the specified image consumer to the list of consumers interested in data for the filtered image   |||   add consumer
filter the information provided in the set color model method of the image consumer interface   |||   set color model
filters the information provided in the set hints method of the image consumer interface   |||   set hints
removes the specified image consumer object from the list of consumers currently registered to receive image data   |||   remove consumer
returns the size of the color / alpha component arrays in this index color model   |||   get map size
converts data for each index from the color and alpha component arrays to an int in the default rgb color model format and copies the resulting 32 - bit argb values into the specified array   |||   get rgb s
returns the lookup table   |||   get table
creates a raster based on a banded sample model with the specified data buffer , width , height , scanline stride , bank indices , and band offsets   |||   create banded raster
returns a new raster which shares all or part of this raster ' s data buffer   |||   create child
creates a raster based on a pixel interleaved sample model with the specified data buffer , width , height , scanline stride , pixel stride , and band offsets   |||   create interleaved raster
returns the number of scaling factors and offsets used in this rescale op   |||   get num factors
if the color model is an index color model and the subclass has set the can filter index color model flag to true , we substitute a filtered version of the color model here and wherever that original color model object appears in the set pixels methods   |||   set color model
creates a new sample model with a subset of the bands of this sample model   |||   create subset sample model
returns the data type of the data buffer storing the pixel data   |||   get data type
returns all samples for a rectangle of pixels in a double array , one sample per array element   |||   get pixels
sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element   |||   set samples
this creates a new single pixel packed sample model with a subset of the bands of this single pixel packed sample model   |||   create subset sample model
returns an image capabilities object which can be inquired as to the specific capabilities of this volatile image   |||   get capabilities
sets a rect of the image to the contents of the raster r , which is assumed to be in the same coordinate space as the writable rendered image   |||   set data
adds a float to the list of parameters   |||   add
returns a source as a rendered image   |||   get rendered source
returns a vector of renderable images that are the sources of image data for this renderable image   |||   get sources
modifies the current user - to - device transform by appending another transform   |||   concatenate transform
returns the printable instance responsible for rendering the page specified by page index   |||   get printable
returns the y coordinate of the upper left point of the imageable area of the paper object associated with this page format   |||   get imageable y
returns a transformation matrix that translates user space rendering to the requested orientation of the page   |||   get matrix
returns a copy of the paper object associated with this page format   |||   get paper
gets the name of the document to be printed   |||   get job name
a convenience method which looks up 2d print services   |||   lookup print services
a convenience method which displays a cross - platform page setup dialog   |||   page dialog
returns the method descriptors of the bean that define the externally visible methods supported by this bean   |||   get method descriptors
determines whether beans can assume a gui is available   |||   is gui available
the implementation first checks to see if an expression with this value has already been written   |||   write expression
writes statement old stm to the stream   |||   write statement
returns the name of the target ' s writable property that this event handler will set , or the name of the method that this event handler will invoke on the target   |||   get action
mark an event set as unicast or not   |||   set unicast
retrieve a named attribute with this feature   |||   get value
gets the method that should be used to write an indexed property value   |||   get indexed write method
sets the method that should be used to write an indexed property value   |||   set indexed write method
introspect on a java bean and learn all about its properties , exposed methods , below a given " stop " point   |||   get bean info
reports an integer bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name   |||   fire indexed property change
returns the java type info for the property   |||   get property type
adds a listener for the value change   |||   add property change listener
gets the property value   |||   get value
locate a value editor for a given target type   |||   find editor
registers an editor class to edit values of the given target class   |||   register editor
deny knowledge of a default event   |||   get default event index
forwards the property change event to the listener delegate   |||   vetoable change
add a vetoable change listener to the listener list   |||   add vetoable change listener
fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name   |||   fire vetoable change
returns an array of all the listeners that were added to the vetoable change support object with add vetoable change listener   |||   get vetoable change listeners
determines whether this bean needs a gui   |||   needs gui
this method writes out the preamble associated with the xml encoding if it has not been written already and then writes out all of the values that been written to the stream since the last time flush was called   |||   flush
sets the owner of this encoder to owner   |||   set owner
this method may be overridden by subclasses to provide their own initialization behaviors   |||   initialize bean context resources
gets the bean context from which this event was propagated   |||   get propagated from
sets the bean context from which this event was propagated   |||   set propagated from
gets the list of service dependent selectors   |||   get current service selectors
a bean context child , or any arbitrary object associated with a bean context child , may obtain a reference to a currently registered service from its nesting bean context services via invocation of this method   |||   get service
called by write object after default write object but prior to serialization of currently serializable children   |||   bcs pre serialization hook
called by read object with the newly deserialized child and bcs child   |||   child deserialized hook
tests to see if all objects in the specified collection are children of this bean context   |||   contains all
determines whether or not the specified object is currently a child of this bean context   |||   contains key
protected method called from constructor and read object to initialize transient state of bean context support instance   |||   initialize
this method is typically called from the environment in order to determine if the implementor " needs " a gui   |||   needs gui
internal remove used when removal caused by unexpected set bean context or by remove invocation   |||   remove
gets the number of children currently nested in this bean context   |||   size
subclasses of this class may override , or envelope , this method to add validation behavior for the bean context to examine child objects immediately prior to their being added to the bean context   |||   validate pending add
see the general contract of the read method of input stream   |||   read
closes the stream and releases any system resources associated with it   |||   close
closes the stream , flushing it first   |||   close
flushes the stream   |||   flush
writes a line separator   |||   new line
reads the next byte of data from this input stream   |||   read
reads up to len bytes of data into an array of bytes from this input stream   |||   read
creates a newly allocated byte array   |||   to byte array
writes the specified byte to this byte array output stream   |||   write
appends the specified character to this writer   |||   append
returns a copy of the input data   |||   to char array
converts input data to a string   |||   to string
reads up to len bytes of data from the contained input stream into an array of bytes   |||   read
see the general contract of the read int method of data input   |||   read int
see the general contract of the skip bytes method of data input   |||   skip bytes
writes every character in the string s , to the output stream , in order , two bytes per character   |||   write chars
writes len bytes from the specified byte array starting at offset off to the underlying output stream   |||   write
writes a char to the underlying output stream as a 2 - byte value , high byte first   |||   write char
writes a string to the underlying output stream as a sequence of characters   |||   write chars
tests whether the application can modify the file denoted by this abstract pathname   |||   can write
returns the abstract pathname of this abstract pathname ' s parent , or null if this pathname does not name a parent directory   |||   get parent file
computes a hash code for this abstract pathname   |||   hash code
sets the last - modified time of the file or directory named by this abstract pathname   |||   set last modified
returns an estimate of the number of remaining bytes that can be read or skipped over from this input stream without blocking by the next invocation of a method for this input stream   |||   available
reads up to b length bytes of data from this input stream into an array of bytes   |||   read
repositions this stream to the position at the time the mark method was last called on this input stream   |||   reset
closes this output stream and releases any system resources associated with the stream   |||   close
skips over and discards n bytes of data from this input stream   |||   skip
get the value of the named short field from the persistent field   |||   get
reads the persistent fields from the stream and makes them available by name   |||   read fields
reads an " unshared " object from the object input stream   |||   read unshared
validates the object   |||   validate object
write the non - static and non - transient fields of the current class to this stream   |||   default write object
enable the stream to do replacement of objects in the stream   |||   enable replace object
reset will disregard the state of any objects already written to the stream   |||   reset
writes a 64 bit double   |||   write double
method used by subclasses to override the default write object method   |||   write object override
the write stream header method is provided so subclasses can append or prepend their own header to the stream   |||   write stream header
put the value of the named char field into the persistent field   |||   put
returns the name of the class described by this descriptor   |||   get name
returns character encoding of field type   |||   get type code
return the jvm type signature   |||   get type string
flushes this output stream and forces any buffered output bytes to be written out   |||   flush
writes b length bytes from the specified byte array to this output stream   |||   write
causes this piped input stream to be connected to the piped output stream src   |||   connect
reads the next byte of data from this piped input stream   |||   read
reads up to len bytes of data from this piped input stream into an array of bytes   |||   read
connects this piped output stream to a receiver   |||   connect
flushes this output stream and forces any buffered output characters to be written out   |||   flush
writes len characters from the specified character array starting at offset off to this piped output stream   |||   write
writes the specified char to the piped output stream   |||   write
prints a character   |||   print
prints a float and then terminate the line   |||   println
writes len bytes from the specified byte array starting at offset off to this stream   |||   write
pushes back a portion of an array of characters by copying it to the front of the pushback buffer   |||   unread
reads up to len bytes of data from this file into an array of bytes   |||   read
sets the file - pointer offset , measured from the beginning of this file , at which the next read or write occurs   |||   seek
converts the double argument to a long using the double to long bits method in class double , and then writes that long value to the file as an eight - byte quantity , high byte first   |||   write double
writes a short to the file as two bytes , high byte first   |||   write short
specified that the character argument starts a single - line comment   |||   comment char
resets this tokenizer ' s syntax table so that all characters are " ordinary " see the ordinary char method for more information on a character being ordinary   |||   reset syntax
closing a string writer has no effect   |||   close
appends the specified character to this appendable   |||   append
returns a hash code for a boolean value ; compatible with boolean hash code   |||   hash code
returns the result of applying the logical or operator to the specified boolean operands   |||   logical or
returns a string object representing the specified boolean   |||   to string
parses the string argument as a signed byte in the radix specified by the second argument   |||   parse byte
compares this object against the specified object   |||   equals
returns the unicode directionality property for the given character unicode code point   |||   get directionality
returns a hash code for this character ; equal to the result of invoking char value   |||   hash code
determines if the character unicode code point may be part of a java identifier as other than the first character   |||   is java identifier part
determines if the given char value is a unicode low - surrogate code unit also known as trailing - surrogate code unit   |||   is low surrogate
deprecated replaced by is whitespacechar   |||   is space
determines if the specified character is permissible as the first character in a unicode identifier   |||   is unicode identifier start
determines if the specified character is an uppercase character   |||   is upper case
converts the specified surrogate pair to its supplementary code point value   |||   to code point
returns this element ' s annotation for the specified type if such an annotation is directly present , else null   |||   get declared annotation
returns a method object that reflects the specified public member method of the class or interface represented by this class object   |||   get method
returns an array containing method objects reflecting all the public methods of the class or interface represented by this class object , including those declared by the class or interface and those inherited from superclasses and superinterfaces   |||   get methods
gets the package for this class   |||   get package
gets the signers of this class   |||   get signers
returns the class representing the superclass of the entity class , interface , primitive type or void represented by this class   |||   get superclass
returns true if an annotation for the specified type is present on this element , else false   |||   is annotation present
determines if the class or interface represented by this class object is either the same as , or is a superclass or superinterface of , the class or interface represented by the specified class parameter   |||   is assignable from
returns true if and only if this class was declared as an enum in the source code   |||   is enum
returns true if and only if the underlying class is a local class   |||   is local class
finds the class with the specified binary name   |||   find class
finds a class with the specified binary name , loading it if necessary   |||   find system class
returns the lock object for class loading operations   |||   get class loading lock
returns the parent class loader for delegation   |||   get parent
returns an input stream for reading the specified resource   |||   get resource as stream
computes the given class ' s derived value for this class value   |||   compute value
returns the value of this double as a long after a narrowing primitive conversion   |||   long value
returns a hexadecimal string representation of the double argument   |||   to hex string
returns the smaller of two float values as if by calling math min   |||   min
compares two integer objects numerically   |||   compare to
compares two int values numerically treating the values as unsigned   |||   compare unsigned
returns the number of zero bits preceding the highest - order " leftmost " one - bit in the two ' s complement binary representation of the specified int value   |||   number of leading zeros
returns the number of zero bits following the lowest - order " rightmost " one - bit in the two ' s complement binary representation of the specified int value   |||   number of trailing zeros
parses the string argument as a signed decimal integer   |||   parse int
parses the string argument as a signed integer in the radix specified by the second argument   |||   parse int
returns the value obtained by rotating the two ' s complement binary representation of the specified int value left by the specified number of bits   |||   rotate left
returns the value obtained by rotating the two ' s complement binary representation of the specified int value right by the specified number of bits   |||   rotate right
returns a string representation of the first argument in the radix specified by the second argument   |||   to string
returns an iterator over elements of type t   |||   iterator
returns a hash code for a long value ; compatible with long hash code   |||   hash code
returns the value of this long as a long value   |||   long value
parses the string argument as an unsigned decimal long   |||   parse unsigned long
returns the signum function of the specified long value   |||   signum
adds two long values together as per the + operator   |||   sum
returns the argument decremented by one , throwing an exception if the result overflows a long   |||   decrement exact
returns the largest closest to positive infinity long value that is less than or equal to the algebraic quotient   |||   floor div
computes the remainder operation on two arguments as prescribed by the ieee 754 standard   |||   ieee remainder
returns the base 10 logarithm of a double value   |||   log 10
returns the smaller of two float values   |||   min
returns the floating - point number adjacent to the first argument in the direction of the second argument   |||   next after
returns the difference of the arguments , throwing an exception if the result overflows a long   |||   subtract exact
converts an angle measured in radians to an approximately equivalent angle measured in degrees   |||   to degrees
return the name of this package   |||   get name
compare this package ' s specification version with a desired version   |||   is compatible with
tests whether the subprocess represented by this process is alive   |||   is alive
causes the current thread to wait , if necessary , until the process represented by this process object has terminated   |||   wait for
returns this process builder ' s operating system program and arguments   |||   command
sets this process builder ' s standard error destination to a file   |||   redirect error
tells whether this process builder merges standard error and standard output   |||   redirect error stream
sets this process builder ' s standard output destination to a file   |||   redirect output
sets this process builder ' s standard output destination   |||   redirect output
compares the specified object with this redirect for equality   |||   equals
throws a security exception if the specified security context is not allowed to read the file specified by the string argument   |||   check read
deprecated this type of security checking is not recommended it is recommended that the check permission call be used instead   |||   class loader depth
deprecated this type of security checking is not recommended it is recommended that the check permission call be used instead   |||   get in check
returns the thread group into which to instantiate any new thread being created at the time this is being called   |||   get thread group
returns a hash code for this short ; equal to the result of invoking int value   |||   hash code
returns a hash code for a short value ; compatible with short hash code   |||   hash code
parses the string argument as a signed short in the radix specified by the second argument   |||   parse short
returns the value obtained by reversing the order of the bytes in the two ' s complement representation of the specified short value   |||   reverse bytes
replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence   |||   replace
replaces each substring of this string that matches the given regular expression with the given replacement   |||   replace all
this object which is already a string! is itself returned   |||   to string
returns the string representation of a specific subarray of the char array argument   |||   value of
returns the string representation of the float argument   |||   value of
appends the string representation of the char argument to this sequence   |||   append
appends the specified char sequence to this sequence   |||   append
appends a subsequence of the specified char sequence to this sequence   |||   append
appends the string representation of the int argument to this sequence   |||   append
appends the specified string to this character sequence   |||   append
returns the char value in this sequence at the specified index   |||   char at
removes the characters in a substring of this sequence   |||   delete
inserts the string representation of the char array argument into this sequence   |||   insert
inserts the string representation of a subarray of the str array argument into this sequence   |||   insert
inserts the string representation of the float argument into this sequence   |||   insert
returns the length character count   |||   length
the character at the specified index is set to ch   |||   set char at
returns a new character sequence that is a subsequence of this sequence   |||   sub sequence
copies an array from the specified source array , beginning at the specified position , to the specified position of the destination array   |||   arraycopy
removes the system property indicated by the specified key   |||   clear property
terminates the currently running java virtual machine   |||   exit
returns the system - dependent line separator string   |||   line separator
if this thread was constructed using a separate runnable run object , then that runnable object ' s run method is called ; otherwise , this method does nothing and returns   |||   run
causes the currently executing thread to sleep temporarily cease execution for the specified number of milliseconds , subject to the precision and accuracy of system timers and schedulers   |||   sleep
a hint to the scheduler that the current thread is willing to yield its current use of a processor   |||   yield
determines if the currently running thread has permission to modify this thread group   |||   check access
sets the maximum priority of the group   |||   set max priority
deprecated this method is inherently unsafe see thread stop for details   |||   stop
returns a string representation of this thread group   |||   to string
returns the value in the current thread ' s copy of this thread - local variable   |||   get
sets the current thread ' s copy of this thread - local variable to the specified value   |||   set
fills in the execution stack trace   |||   fill in stack trace
provides programmatic access to the stack trace information printed by print stack trace   |||   get stack trace
sets the stack trace elements that will be returned by get stack trace and printed by print stack trace and related methods   |||   set stack trace
returns the hash code of this annotation , as defined below :   |||   hash code
returns the class object for the annotation type with the missing element   |||   annotation type
returns whether the current jvm configuration supports setting a native method prefix   |||   is native method prefix supported
unregisters the supplied transformer   |||   remove transformer
returns the target method of the call site , according to the behavior defined by this call site ' s specific class   |||   get target
always throws an unsupported operation exception   |||   set target
invokes the method handle , allowing any caller type descriptor , and optionally performing conversions on arguments and return values   |||   invoke
makes a method handle which adapts a target method handle , by running it inside an exception handler   |||   catch exception
adapts a target method handle by pre - processing a sub - sequence of its arguments with a filter another method handle   |||   collect arguments
makes a method handle which adapts a target method handle , by guarding it with a test , a boolean - valued method handle   |||   guard with test
produces a method handle giving read access to a non - static field   |||   find getter
presents the parameter types as a list a convenience method   |||   parameter list
get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site   |||   get instantiated method type
returns a method handle which always delegates either to the target or the fallback   |||   guard with test
returns the target method of the call site , which behaves like a volatile field of the volatile call site   |||   get target
updates the target method of this call site , as a volatile variable   |||   set target
returns an estimate of the number of buffers in the pool   |||   get count
returns a lock info object represented by the given composite data   |||   from
returns the platform mbean server   |||   get platform mb ean server
returns the current memory usage of non - heap memory that is used by the java virtual machine   |||   get non heap memory usage
returns the memory usage of the memory pool when this notification was constructed   |||   get usage
returns the peak memory usage of this memory pool since the java virtual machine was started or since the peak was reset   |||   get peak usage
tests if the memory usage of this memory pool reaches or exceeds its usage threshold value   |||   is usage threshold exceeded
tests if this memory pool supports usage threshold   |||   is usage threshold supported
sets the threshold of this memory pool to the given threshold value if this memory pool supports the usage threshold   |||   set usage threshold
returns a memory usage object represented by the given composite data   |||   from
returns a descriptive representation of this memory usage   |||   to string
returns the stack frame that locked the object monitor   |||   get locked stack frame
returns an object name instance representing the object name of this platform managed object   |||   get object name
returns the java virtual machine specification version   |||   get spec version
returns the java virtual machine implementation vendor   |||   get vm vendor
returns a thread info object represented by the given composite data   |||   from
returns the total number of times that the thread associated with this thread info blocked to enter or reenter a monitor   |||   get blocked count
returns the name of the thread which owns the object for which the thread associated with this thread info is blocked waiting   |||   get lock owner name
returns the cpu time that the current thread has executed in user mode in nanoseconds   |||   get current thread user time
tests if the java virtual machine supports monitoring of ownable synchronizer usage   |||   is synchronizer usage supported
convenience method to set the accessible flag for an array of objects with a single security check for efficiency   |||   set accessible
returns the length of the specified array object , as an int   |||   get length
returns the value of the indexed component in the specified array object , as a short   |||   get short
sets the value of the indexed component of the specified array object to the specified byte value   |||   set byte
sets the value of the indexed component of the specified array object to the specified short value   |||   set short
returns the class object representing the class or interface that declares the executable represented by this object   |||   get declaring class
returns an annotated type object that represents the use of a type to specify the declared type of the field represented by this field   |||   get annotated type
gets the value of a static or instance byte field   |||   get byte
gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion   |||   get short
returns true if this field represents an element of an enumerated type ; returns false otherwise   |||   is enum constant
sets the value of a field as a float on the specified object   |||   set float
sets the value of a field as a long on the specified object   |||   set long
returns a string describing this field , including its generic type   |||   to generic string
returns true if this method is a default method ; returns false otherwise   |||   is default
returns a string describing this method   |||   to string
return true if the integer argument includes the final modifier , false otherwise   |||   is final
return true if the integer argument includes the interface modifier , false otherwise   |||   is interface
return an int value or - ing together the source language modifiers that can be applied to a parameter   |||   parameter modifiers
return a string describing the access modifier flags in the specified modifier   |||   to string
returns a string describing this parameter   |||   to string
returns a big decimal whose value is the absolute value of this big decimal , with rounding according to the context settings   |||   abs
returns a big decimal whose value is this + augend , and whose scale is maxthis scale , augend scale   |||   add
returns a big decimal whose value is this / divisor , and whose preferred scale is this scale - divisor scale ; if the exact quotient cannot be represented because it has a non - terminating decimal expansion an arithmetic exception is thrown   |||   divide
returns a two - element big decimal array containing the result of divide to integral value followed by the result of remainder on the two operands calculated with rounding according to the context settings   |||   divide and remainder
returns a big decimal whose value is - this , and whose scale is this scale   |||   negate
returns a big decimal whose value is this - subtrahend , with rounding according to the context settings   |||   subtract
returns a string representation of this big decimal without an exponent field   |||   to plain string
returns the number of bits in the minimal two ' s - complement representation of this big integer , excluding a sign bit   |||   bit length
returns a big integer whose value is the greatest common divisor of absthis and absval   |||   gcd
returns true if this big integer is probably prime , false if it ' s definitely composite   |||   is probable prime
returns a big integer whose value is this | val   |||   or
returns a big integer whose value is thisexponent   |||   pow
returns an output stream to which the response body can be written   |||   get body
get all not - expired cookies in cookie store   |||   get cookies
get all ur is which identify the cookies in this cookie store   |||   get uri s
returns the port number on the remote host to which this datagram is being sent or from which the datagram was received   |||   get port
sets the ip address of the machine to which this datagram is being sent   |||   set address
connects the socket to a remote address for this socket   |||   connect
returns the unique datagram channel object associated with this datagram socket , if any   |||   get channel
tests if so reuseaddr is enabled   |||   get reuse address
binds a datagram socket to a local port and address   |||   bind
gets the local port   |||   get local port
join the multicast group   |||   join
returns the maximum age of the cookie , specified in seconds   |||   get max age
returns the name of the cookie   |||   get name
specifies the domain within which this cookie should be presented   |||   set domain
create an inet6 address in the exact manner of inet address get by address string , byte except that the ipv6 scope id is set to the value corresponding to the given interface for the address type specified in addr   |||   get by address
returns an inet address object given the raw ip address   |||   get by address
returns the address of the local host   |||   get local host
returns a hashcode for this socket address   |||   hash code
retrieve the address of the network interface used for multicast packets   |||   get interface
joins a multicast group   |||   join group
returns the user name   |||   get user name
returns the socket address of the proxy , or null if its a direct connection   |||   address
tests if so keepalive is enabled   |||   get keep alive
returns the local port number to which this socket is bound   |||   get local port
returns the closed state of the socket   |||   is closed
enable / disable so keepalive   |||   set keep alive
sets the so sndbuf option to the specified value for this socket   |||   set send buffer size
converts this socket to a string   |||   to string
connects this socket to the specified port number on the specified host   |||   connect
creates either a stream or a datagram socket   |||   create
returns the value of this socket ' s port field   |||   get port
returns the decoded authority component of this uri   |||   get authority
returns the raw fragment component of this uri   |||   get raw fragment
returns the content of this uri as a us - ascii string   |||   to asciis tring
gets the query part of this url   |||   get query
gets the anchor also known as the " reference " of this url   |||   get ref
sets an application ' s url stream handler factory   |||   set urls tream handler factory
constructs a string representation of this url   |||   to string
returns a uri equivalent to this url   |||   to uri
returns the default value of the allow user interaction field   |||   get default allow user interaction
returns an unmodifiable map of the header fields   |||   get header fields
returns the value of this object ' s if modified since field   |||   get if modified since
sets the content handler factory of an application   |||   set content handler factory
returns a hashcode calculated from the hashcode of the actions string and the url string   |||   hash code
get the ip address of our host   |||   get host address
provides the default hash calculation   |||   hash code
opens a connection to the object referenced by the url argument   |||   open connection
returns this buffer ' s position   |||   position
resets this buffer ' s position to the previously - marked position   |||   reset
allocates a new byte buffer   |||   allocate
creates a new , read - only byte buffer that shares this buffer ' s content   |||   as read only buffer
creates a view of this byte buffer as a short buffer   |||   as short buffer
compacts this buffer optional operation   |||   compact
creates a new byte buffer that shares this buffer ' s content   |||   duplicate
tells whether or not this buffer is equal to another object   |||   equals
relative get method   |||   get
relative get method for reading a float value   |||   get float
modifies this buffer ' s byte order   |||   order
relative bulk put method optional operation   |||   put
relative put method for writing a double value optional operation   |||   put double
relative put method for writing an int value optional operation   |||   put int
absolute put method for writing an int value optional operation   |||   put int
returns the length of this character buffer   |||   length
allocates a new short buffer   |||   allocate
attempts to acquire an exclusive lock on this channel ' s file   |||   try lock
attempts to acquire a lock on the given region of this channel ' s file   |||   try lock
opens an asynchronous server - socket channel   |||   open
opens an asynchronous socket channel   |||   open
reads a sequence of bytes from this channel into a subsequence of the given buffers   |||   read
constructs a reader that decodes bytes from the given channel using the given decoder   |||   new reader
constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel   |||   new writer
tells whether or not this channel ' s socket is connected   |||   is connected
returns a string describing this file - mapping mode   |||   to string
tells whether or not this lock overlaps the given lock range   |||   overlaps
returns the multicast group for which this membership key was created   |||   group
unblock multicast datagrams from the given source address that was previously blocked using the block method   |||   unblock
joins a multicast group to begin receiving datagrams sent to the group from a given source address   |||   join
returns the current size of entity to which this channel is connected   |||   size
retrieves the current attachment   |||   attachment
requests that the registration of this key ' s channel with its selector be cancelled   |||   cancel
tests whether this key ' s channel has either finished , or failed to finish , its socket - connection operation   |||   is connectable
causes the first selection operation that has not yet returned to return immediately   |||   wakeup
closes this channel   |||   impl close channel
registers the given channel with this selector   |||   register
opens a datagram channel   |||   open datagram channel
compares this charset to another   |||   compare to
tells whether or not this object is equal to another   |||   equals
returns a charset object for the named charset   |||   for name
returns this charset ' s canonical name   |||   name
constructs a new decoder for this charset   |||   new decoder
flushes this decoder   |||   impl flush
reports a change to this decoder ' s malformed - input action   |||   impl on malformed input
tells whether or not this decoder has yet detected a charset optional operation   |||   is charset detected
returns this decoder ' s current action for malformed - input errors   |||   malformed input action
returns this decoder ' s current action for unmappable - character errors   |||   unmappable character action
tells whether or not this encoder can encode the given character sequence   |||   can encode
resets this encoder , clearing any charset - specific internal state   |||   impl reset
returns this encoder ' s current action for malformed - input errors   |||   malformed input action
resets this encoder , clearing any internal state   |||   reset
tells whether or not this object describes an error condition   |||   is error
throws an exception appropriate to the result described by this object   |||   throw exception
static factory method that returns the unique result object describing an unmappable - character error of the given length   |||   unmappable for length
creates an iterator that iterates over the charsets supported by this provider   |||   charsets
creates a new directory   |||   create directory
creates a symbolic link to a target optional operation   |||   create symbolic link
deletes a file   |||   delete
returns the owner of a file   |||   get owner
returns a file ' s posix file permissions   |||   get posix file permissions
opens or creates a file for writing , returning a buffered writer to write text to the file in an efficient manner   |||   new buffered writer
opens or creates a file , returning an output stream that may be used to write bytes to the file   |||   new output stream
return a stream that is lazily populated with path by walking the file tree rooted at a given starting file   |||   walk
write lines of text to a file   |||   write
reads the value of a file store attribute   |||   get attribute
returns the provider that created this file system   |||   provider
returns the default file system   |||   get default
constructs a new file system to access the contents of a file as a file system   |||   new file system
constructs a new file system that is identified by a uri   |||   new file system
invoked for a directory before entries in the directory are visited   |||   pre visit directory
tests if this path ends with the given path   |||   ends with
registers the file located by this path with a watch service   |||   register
returns a file object representing this path   |||   to file
converts the given uri to a path object   |||   get
returns a new file attribute view to access the file attributes of a file in this directory   |||   get file attribute view
resets this watch key   |||   reset
sets the type component of this builder   |||   set type
returns the acl entry type   |||   type
returns the value of the read - only attribute   |||   is read only
returns a file time representing the same point of time value on the time - line as the provided instant object   |||   from
converts this file time object to an instant   |||   to instant
returns the group owner of the file   |||   group
returns a list containing the names of the user - defined attributes   |||   list
read the value of a user - defined attribute into a buffer   |||   read
compares this marshalled object to another object   |||   equals
this protected method is necessary for subclasses to make the active object callback to the group ' s monitor   |||   active object
deprecated no replacement   |||   release input stream
returns a string that represents the value of this remote object   |||   to string
returns a string representation of the client host for the remote method invocation being processed in the current thread   |||   get client host
log rmi calls to the output stream out   |||   set log
deprecated no replacement the set ref method was intended for setting the remote reference of a remote stub this is unnecessary , since remote stubs can be created and initialized with a remote reference through use of the remote stub remote ref constructor   |||   set ref
provides the implementation for rmi class loader get class loader string   |||   get class loader
create a client socket connected to the specified host and port   |||   create socket
marshals a binary representation of this uid to a data output instance   |||   write
deprecated this method is deprecated because it supports only static stubs use export object remote , port or export object remote , port , csf , ssf instead   |||   export object
exports the remote object to make it available to receive incoming calls , using the particular supplied port   |||   export object
removes the remote object , obj , from the rmi runtime   |||   unexport object
checks two access control context objects for equality   |||   equals
performs the specified privileged exception action with privileges enabled and restricted by the specified access control context   |||   do privileged
generates the parameters   |||   engine generate parameters
returns a parameter object for the specified algorithm   |||   get instance
returns a formatted string describing the parameters   |||   to string
checks if the specified permission is " implied " by this object   |||   implies
returns the signer ' s certificate path   |||   get signer cert path
turns the digest function on or off   |||   on
gets the keystore protection parameters for this domain   |||   get protection parameter
initializes the key pair generator for a certain keysize with the given source of randomness and a default parameter set   |||   initialize
returns the attribute ' s value   |||   get value
gets a keystore entry for the specified alias with the specified protection parameter   |||   get entry
returns a keystore object of the specified type   |||   get instance
stores this keystore to the given output stream , and protects its integrity with the given password   |||   store
clears the password   |||   destroy
gets the password   |||   get password
returns a string representation of this secret key entry   |||   to string
retrieves the number of entries in this keystore   |||   engine size
returns a clone if the implementation is cloneable   |||   clone
returns the length of the digest in bytes , or 0 if this operation is not supported by the provider and the implementation is not cloneable   |||   get digest length
returns a string representation of this message digest object   |||   to string
returns the hash code value for this permission object   |||   hash code
returns a string describing this permission   |||   to string
returns true if the specified subject is implied by this principal   |||   implies
returns the name of this provider   |||   get name
returns an enumeration of the keys in this hashtable   |||   keys
sets the key property to have the specified value   |||   put
returns the given number of seed bytes , computed using the seed generation algorithm that this class uses to seed itself   |||   generate seed
returns a secure random object that was selected by using the algorithms / providers specified in the securerandom strong algorithms security property   |||   get instance strong
generates a user - specified number of random bytes   |||   next bytes
returns the signature bytes of all the data updated so far   |||   engine sign
returns a string describing this unresolved permission   |||   to string
adds an acl entry to this acl   |||   add entry
adds the specified member to the group   |||   add member
returns the type of this certificate   |||   get type
generates a cert path object and initializes it with a list of certificates   |||   generate cert path
returns the built certification path   |||   get cert path
returns the type of this cert store   |||   get type
gets the extension ' s criticality setting   |||   is critical
returns the built and validated certification path   |||   get cert path
returns an immutable set of the most - trusted cas   |||   get trust anchors
checks the revocation enabled flag   |||   is revocation enabled
sets the explicit policy required flag   |||   set explicit policy required
sets the policy qualifiers rejected flag   |||   set policy qualifiers rejected
sets the set of most - trusted cas   |||   set trust anchors
checks that the certificate is currently valid   |||   check validity
gets the not after date from the validity period of the certificate   |||   get not after
gets the signature value the raw signature bits from the certificate   |||   get signature
returns the issuer criterion as a byte array   |||   get issuer as bytes
returns the name constraints criterion   |||   get name constraints
returns the policy criterion   |||   get policy
sets the authority key identifier criterion   |||   set authority key identifier
sets the name constraints criterion   |||   set name constraints
sets the serial number criterion   |||   set serial number
compares this crl for equality with the given object   |||   equals
gets the signature algorithm oid string from the crl   |||   get sig alg oid
gets the der - encoded signature algorithm parameters from this crl ' s signature algorithm   |||   get sig alg params
returns the asn 1 der - encoded form of this crl entry , that is the inner sequence   |||   get encoded
returns the min crl number criterion   |||   get min crl
gets a set of the oid strings for the extensions marked non - critical in the certificate / crl managed by the object implementing this interface   |||   get non critical extension oid s
returns the base , g   |||   get g
returns the modulus   |||   get modulus
returns the prime exponentq   |||   get prime exponent q
returns a big integer whose i - th bit corresponds to the i - th coefficient of the reduction polynomial for polynomial basis or null for normal basis   |||   get reduction polynomial
returns a hash code value for this characteristic 2 finite field   |||   hash code
returns the affine y - coordinate y   |||   get affine y
returns the encoded key   |||   get encoded
returns the key bytes , encoded according to the pkcs # 8 standard   |||   get encoded
returns the keysize   |||   get keysize
returns a copy of the other prime info or null if there are only two prime factors p and q   |||   get other prime info
returns the key bytes , encoded according to the x 509 standard   |||   get encoded
this method frees the array object and releases the resources that it holds   |||   free
retrieves the contents of the sql array value designated by this array object in the form of an array in the java programming language   |||   get array
retreives a slice of the sql array value designated by this array object , beginning with the specified index and containing up to count successive elements of the sql array   |||   get array
retrieves the jdbc type of the elements in the array designated by this array object   |||   get base type
retrieves the byte position at which the specified byte array pattern begins within the blob value that this blob object represents   |||   position
retrieves the value of the designated jdbc array parameter as an array object in the java programming language   |||   get array
deprecated use get big decimalint parameter index or get big decimal string parameter name   |||   get big decimal
retrieves the value of the designated jdbc date parameter as a java sql date object   |||   get date
retrieves the value of a jdbc float parameter as a float in the java programming language   |||   get float
retrieves the value of a parameter as an object in the java programming language   |||   get object
retrieves the value of the designated jdbc rowid parameter as a java sql row id object   |||   get row id
retrieves the value of the designated jdbc smallint parameter as a short in the java programming language   |||   get short
retrieves the value of a jdbc timestamp parameter as a java sql timestamp object   |||   get timestamp
retrieves the value of a jdbc timestamp parameter as a java sql timestamp object , using the given calendar object to construct the timestamp object   |||   get timestamp
factory method for creating array objects   |||   create array of
creates a statement object that will generate result set objects with the given type , concurrency , and holdability   |||   create statement
retrieves the number of milliseconds the driver will wait for a database request to complete   |||   get network timeout
retrieves whether this connection object is in read - only mode   |||   is read only
converts the given sql statement into the system ' s native sql grammar   |||   native sql
creates a prepared statement object that will generate result set objects with the given type and concurrency   |||   prepare statement
sets the value of the connection ' s client info properties   |||   set client info
retrieves this jdbc driver ' s major version number   |||   get driver major version
retrieves the version number of this jdbc driver as a string   |||   get driver version
retrieves a description of the primary key columns that are referenced by the given table ' s foreign key columns the primary keys imported by a table   |||   get imported keys
retrieves the maximum number of columns this database allows in a group by clause   |||   get max columns in group by
retrieves the maximum number of concurrent connections to this database that are possible   |||   get max connections
retrieves the maximum number of characters that this database allows in a procedure name   |||   get max procedure name length
retrieves whether this database is in read - only mode   |||   is read only
retrieves whether null values are sorted at the start regardless of sort order   |||   nulls are sorted at start
retrieves whether for the given type of result set object , the result set ' s own updates are visible   |||   own updates are visible
retrieves whether a catalog name can be used in a privilege definition statement   |||   supports catalogs in privilege definitions
retrieves whether this database supports expressions in order by lists   |||   supports expressions in order by
retrieves whether this database treats mixed case unquoted sql identifiers as case sensitive and as a result stores them in mixed case   |||   supports mixed case identifiers
retrieves whether this database supports the given concurrency type in combination with the given result set type   |||   supports result set concurrency
retrieves whether a schema name can be used in a data manipulation statement   |||   supports schemas in data manipulation
retrieves whether a schema name can be used in a table definition statement   |||   supports schemas in table definitions
retrieves whether this database supports subqueries in in expressions   |||   supports subqueries in ins
retrieves whether this database stores tables in a local file   |||   uses local files
this method always throws an unsupported operation exception and should not be used because sql date values do not have a time component   |||   to instant
formats a date in the date escape format yyyy - mm - dd   |||   to string
obtains an instance of date from a local date object with the same year , month and day of month value as the given local date   |||   value of
removes the specified driver from the driver manager ' s list of registered drivers   |||   deregister driver
prints a message to the current jdbc log stream   |||   println
sets the maximum time in seconds that a driver will wait while attempting to connect to a database once the driver has been identified   |||   set login timeout
retrieves the sql structured type instance referenced by this ref object   |||   get object
clears all warnings reported on this result set object   |||   clear warnings
retrieves the value of the designated column in the current row of this result set object as a nclob object in the java programming language   |||   get nc lob
retrieves the value of the designated column in the current row of this result set object as a string in the java programming language   |||   get ns tring
retrieves the first warning reported by calls on this result set object   |||   get warnings
moves the cursor to the insert row   |||   move to insert row
updates the designated column with an ascii stream value , which will have the specified number of bytes   |||   update ascii stream
updates the designated column with a java math big decimal value   |||   update big decimal
updates the designated column with a java sql big decimal value   |||   update big decimal
updates the designated column with a binary stream value , which will have the specified number of bytes   |||   update binary stream
updates the designated column using the given input stream , which will have the specified number of bytes   |||   update blob
updates the designated column with a long value   |||   update long
updates the designated column with a java sql ref value   |||   update ref
updates the designated column with a java sql sqlxml value   |||   update sqlxml
returns the number of columns in this result set object   |||   get column count
retrieves the generated id for the savepoint that this savepoint object represents   |||   get savepoint id
populates this object with data read from the database   |||   read sql
retrieves the sql state for this sql exception object   |||   get sqls tate
reads the next attribute in the stream and returns it as a stream of uninterpreted bytes   |||   read binary stream
reads an sql ref value from the stream and returns it as a ref object in the java programming language   |||   read ref
reads the next attribute in the stream and returns it as a string in the java programming language   |||   read string
writes an sql clob value to the stream   |||   write clob
writes the next attribute to the stream as a java sql date object   |||   write date
writes the next attribute to the stream as a java double   |||   write double
writes an sql rowid value to the stream   |||   write row id
writes a sql datalink value to the stream   |||   write url
returns a source for reading the xml value designated by this sqlxml instance   |||   get source
clears all the warnings reported on this statement object   |||   clear warnings
releases this statement object ' s database and jdbc resources immediately instead of waiting for this to happen when it is automatically closed   |||   close
executes the given sql statement , which may be an insert , update , or delete statement or an sql statement that returns nothing , such as an sql ddl statement   |||   execute large update
executes the given sql statement , which may be an insert , update , or delete statement or an sql statement that returns nothing , such as an sql ddl statement   |||   execute update
executes the given sql statement and signals the driver that the auto - generated keys indicated in the given array should be made available for retrieval   |||   execute update
retrieves the connection object that produced this statement object   |||   get connection
retrieves whether this statement object has been closed   |||   is closed
sets the number of seconds the driver will wait for a statement object to execute to the given number of seconds   |||   set query timeout
formats a time in jdbc time escape format   |||   to string
converts a string in jdbc time escape format to a time value   |||   value of
indicates whether this timestamp object is later than the given timestamp object   |||   after
indicates whether this timestamp object is earlier than the given timestamp object   |||   before
tests to see if this timestamp object is equal to the given object   |||   equals
returns the index of the first character following the run with respect to the given attribute containing the current character   |||   get run limit
returns the index of the first character following the run with respect to the given attributes containing the current character   |||   get run limit
return the number of level runs   |||   get run count
reorder the objects in the array into visual order based on their levels   |||   reorder visually
get the text being scanned   |||   get text
returns the last boundary   |||   last
set a new text string to be scanned   |||   set text
decrements the iterator ' s index by one and returns the character at the new index   |||   previous
parses a number from the input text   |||   parse
set the choices to be used in formatting   |||   set choices
get the previous collation element in the string   |||   previous
returns the calendar field associated with this attribute   |||   get calendar field
gets the date / time formatter with the given date and time formatting styles for the default format locale   |||   get date time instance
set the calendar to be used by this date format   |||   set calendar
gets ampm strings   |||   get am pm strings
gets localized date - time pattern characters   |||   get local pattern chars
sets era strings   |||   set eras
returns whether the parsejava lang string , java text parse position method returns big decimal   |||   is parse big decimal
sets the currency used by this number format when formatting currency values   |||   set currency
sets the minimum number of digits allowed in the fraction portion of a number   |||   set minimum fraction digits
sets whether the parsejava lang string , java text parse position method returns big decimal   |||   set parse big decimal
gets the character used for thousands separator   |||   get grouping separator
gets the character used to separate positive and negative subpatterns in a pattern   |||   get pattern separator
sets the character used for a digit in a pattern   |||   set digit
sets the string used to represent infinity   |||   set infinity
return a string representation of this field position   |||   to string
sets the formats to use for the values passed into format methods or returned from parse methods   |||   set formats by argument index
returns a currency format for the specified locale   |||   get currency instance
sets whether or not numbers should be parsed as integers only   |||   set parse integer only
set the index at which a parse error occurred   |||   set error index
returns a new general - purpose number format instance for the specified locale   |||   get number instance
obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration   |||   tick
obtains a clock that returns the current instant ticking in whole seconds using best available system clock   |||   tick seconds
returns the day - of - week that is the specified number of days after this one   |||   plus
returns a copy of this duration with a positive length   |||   abs
checks if this duration is equal to the specified duration   |||   equals
converts this duration to the total length in milliseconds   |||   to millis
converts this duration to the total length in nanoseconds expressed as a long   |||   to nanos
checks if this instant is equal to the specified instant   |||   equals
checks if this instant is before the specified instant   |||   is before
returns a copy of this instant with the specified duration in milliseconds subtracted   |||   minus millis
obtains an instance of instant using milliseconds from the epoch of 1970 - 01 - 01 t00 : 00 : 00z   |||   of epoch milli
returns a copy of this instant with the specified duration in seconds added   |||   plus seconds
returns an adjusted copy of this instant   |||   with
gets the day - of - month field   |||   get day of month
returns a copy of this local date with the specified number of days subtracted   |||   minus days
returns a copy of this date with the specified amount added   |||   plus
returns a copy of this local date with the day - of - month altered   |||   with day of month
checks if this date - time is equal to another date - time   |||   equals
checks if this date - time is before the specified date - time   |||   is before
returns a copy of this local date time with the specified number of minutes subtracted   |||   minus minutes
obtains an instance of local date time from a text string using a specific formatter   |||   parse
returns a copy of this local date time with the specified number of minutes added   |||   plus minutes
gets the local time part of this date - time   |||   to local time
returns a copy of this date - time with the specified field set to a new value   |||   with
obtains an instance of local time from an hour and minute   |||   of
obtains an instance of local time from a second - of - day value   |||   of second of day
returns a copy of this local time with the specified number of minutes added   |||   plus minutes
gets the month - of - year int value   |||   get value
formats this month - day using the specified formatter   |||   format
checks if this month - day is before the specified month - day   |||   is before
queries this month - day using the specified query   |||   query
returns a copy of this month day with the day - of - month altered   |||   with day of month
checks if the instant of this date - time is before that of the specified date - time   |||   is before
checks if the instant of this date - time is equal to that of the specified date - time   |||   is equal
returns a copy of this offset date time with the specified number of weeks subtracted   |||   minus weeks
returns a copy of this offset date time with the specified number of days added   |||   plus days
returns a copy of this offset date time with the day - of - month altered   |||   with day of month
returns a copy of this offset date time with the day - of - year altered   |||   with day of year
returns a copy of this offset date time with the year altered   |||   with year
obtains an instance of offset time from a local time and an offset   |||   of
returns a copy of this offset time with the minute - of - hour altered   |||   with minute
returns a copy of this offset time with the specified offset ensuring that the result is at the same instant on an implied day   |||   with offset same instant
returns a copy of this offset time with the second - of - minute altered   |||   with second
returns a copy of this period with the specified years subtracted   |||   minus years
returns a copy of this period with the specified days added   |||   plus days
returns a copy of this period with the specified months added   |||   plus months
subtracts this period from the specified temporal object   |||   subtract from
outputs this period as a string , such as p6 y3 m1d   |||   to string
checks if this year is before the specified year   |||   is before
gets the length of this year in days   |||   length
returns a copy of this year with the specified number of years subtracted   |||   minus years
obtains the current year from the system clock in the specified time - zone   |||   now
returns a copy of this year with the specified number of years added   |||   plus years
adjusts the specified temporal object to have this year - month   |||   adjust into
combines this year - month with a day - of - month to create a local date   |||   at day
returns a copy of this year month with the specified number of months added   |||   plus months
returns a copy of this zoned date time with the specified number of weeks subtracted   |||   minus weeks
returns a copy of this zoned date time with the day - of - year altered   |||   with day of year
returns a copy of this zoned date time with the year altered   |||   with year
normalizes the time - zone id , returning a zone offset where possible   |||   normalized
obtains an instance of zone id wrapping an offset   |||   of offset
gets the associated time - zone rules   |||   get rules
a hash code for this chronology   |||   hash code
checks if this date is after the specified date ignoring the chronology   |||   is after
calculates the period between this date and another date as a chrono period   |||   until
obtains an instance of chrono local date time from a temporal object   |||   from
checks if this date - time is after the specified date - time ignoring the chronology   |||   is after
checks if this date - time is before the specified date - time ignoring the chronology   |||   is before
obtains the current local date in this chronology from the specified clock   |||   date now
obtains the current local date in this chronology from the system clock in the specified time - zone   |||   date now
obtains an instance of chronology from a temporal object   |||   from
obtains an instance of chronology from a locale   |||   of locale
gets the value of the specified field from this era as a long   |||   get long
obtains a local date in hijrah calendar system from the era , year - of - era and day - of - year fields   |||   date year day
obtains an iso zoned date - time in this chronology from an instant   |||   zoned date time
obtains a local date in japanese calendar system from the proleptic - year and day - of - year fields   |||   date year day
obtains the current japanese date from the system clock in the default time - zone   |||   now
obtains the current japanese date from the system clock in the specified time - zone   |||   now
obtains a local date in the minguo calendar system from the epoch - day   |||   date epoch day
gets the id of the chronology - ' minguo '   |||   get id
obtains a minguo date from a temporal object   |||   from
gets the chronology of this date , which is the minguo calendar system   |||   get chronology
gets the chronology of this date , which is the thai buddhist calendar system   |||   get chronology
formats a date - time object to an appendable using this formatter   |||   format to
gets the overriding chronology to be used during formatting   |||   get chronology
gets the decimal style to be used during formatting   |||   get decimal style
gets the locale to be used during formatting   |||   get locale
fully parses the text producing a temporal object   |||   parse
returns a description of the underlying formatters   |||   to string
returns a copy of this formatter with a new locale   |||   with locale
appends the time - zone region id , such as ' europe / paris ' , to the formatter , rejecting the zone id if it is a zone offset   |||   append zone region id
changes the parse style to be lenient for the remainder of the formatter   |||   parse lenient
checks if this decimal style is equal to another decimal style   |||   equals
returns a copy of the info with a new character that represents the negative sign   |||   with negative sign
calculates the amount of time until another temporal in terms of the specified unit   |||   until
returns the " first day of month " adjuster , which returns a new date set to the first day of the current month   |||   first day of month
returns the " last day of month " adjuster , which returns a new date set to the last day of the current month   |||   last day of month
returns the next day - of - week adjuster , which adjusts the date to the first occurrence of the specified day - of - week after the date being adjusted   |||   next
returns the previous - or - same day - of - week adjuster , which adjusts the date to the first occurrence of the specified day - of - week before the date being adjusted unless it is already on that day in which case the same object is returned   |||   previous or same
a query for local time returning null if not found   |||   local time
a query for the smallest supported unit   |||   precision
gets the minimum value that the field can take   |||   get minimum
checks if the value is within the valid range   |||   is valid value
obtains a variable value range   |||   of
gets the offset before the transition   |||   get offset before
obtains an instance defining a transition between two offsets   |||   of
checks if this set of rules equals another   |||   equals
gets the next transition after the specified instant   |||   next transition
removes all of the elements from this list optional operation   |||   clear
returns a list iterator over the elements in this list in proper sequence , starting at the specified position in the list   |||   list iterator
returns a view of the portion of this list between the specified from index , inclusive , and to index , exclusive   |||   sub list
removes all of the elements from this queue   |||   clear
removes all of the elements from this deque   |||   clear
inserts the specified element at the end of this deque   |||   offer
inserts the specified element at the end of this deque   |||   offer last
retrieves and removes the first element of this deque   |||   remove first
replaces each element of this list with the result of applying the operator to that element   |||   replace all
searches a range of the specified array of longs for the specified value using the binary search algorithm   |||   binary search
copies the specified array , truncating or padding with null characters if necessary so the copy has the specified length   |||   copy of
returns true if the two specified arrays of bytes are equal to one another   |||   equals
assigns the specified object reference to each element of the specified range of the specified array of objects   |||   fill
assigns the specified object reference to each element of the specified array of objects   |||   fill
sorts the specified range of the specified array of objects into ascending order , according to the natural ordering of its elements   |||   sort
returns a spliterator of double covering the specified range of the specified array   |||   spliterator
returns a spliterator of long covering the specified range of the specified array   |||   spliterator
decodes all bytes from the input byte array using the base64 encoding scheme , writing the results into a newly - allocated output byte array   |||   decode
sets the date field parameters to the values given by year , month , and day of month   |||   set date
sets the lenient mode parameter to the value given by lenient   |||   set lenient
sets the given calendar field value and the time value millisecond offset from the epoch of this calendar undefined   |||   clear
fills in any unset fields in the calendar fields   |||   complete
returns the value of the given calendar field   |||   get
gets a calendar using the default time zone and locale   |||   get instance
gets what the minimal days required in the first week of the year are ; e g , if the first week is defined as one that contains the first day of the first month of a year , this method returns 1   |||   get minimal days in first week
sets the values for the calendar fields year , month , day of month , hour of day , and minute   |||   set
sets this calendar ' s time with the given date   |||   set time
return a string representation of this calendar   |||   to string
returns a dynamically typesafe view of the specified map   |||   checked map
returns a dynamically typesafe view of the specified sorted set   |||   checked sorted set
rotates the elements in the specified list by the specified distance   |||   rotate
returns a synchronized thread - safe list backed by the specified list   |||   synchronized list
returns a synchronized thread - safe navigable map backed by the specified navigable map   |||   synchronized navigable map
returns the iso 4217 numeric code of this currency   |||   get numeric code
gets the symbol of this currency for the specified locale   |||   get symbol
tests if this date is before the specified date   |||   before
deprecated as of jdk version 1 1 , replaced by - calendar get calendar zone offset + calendar get calendar dst offset / 60 1000   |||   get timezone offset
deprecated as of jdk version 1 1 , replaced by calendar set calendar month , int month   |||   set month
deprecated as of jdk version 1 1 , replaced by date format format date date , using a gmt time zone   |||   to gmts tring
inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions , throwing an illegal state exception if no space is currently available   |||   add last
removes the key and its corresponding value from this dictionary   |||   remove
return the count of values recorded   |||   get count
tests if this enumeration contains more elements   |||   has more elements
associates the specified value with the specified key in this map   |||   put
creates an enum set with the same element type as the specified enum set , initially containing all the elements of this type that are not contained in the specified set   |||   complement of
creates an enum set with the same element type as the specified enum set , initially containing the same elements if any   |||   copy of
creates an enum set initially containing all of the elements in the range defined by the two specified endpoints   |||   range
returns the incompatible flag   |||   get flags
closes this formatter   |||   close
flushes this formatter   |||   flush
returns the minimum value for the given calendar field of this gregorian calendar instance   |||   get minimum
sets the gregorian calendar change date   |||   set gregorian change
if the specified key is not already associated with a value or is associated with null , associates it with the given non - null value   |||   merge
returns true if this set contains the specified element   |||   contains
compares the specified object with this map for equality , as per the definition in the map interface   |||   equals
returns a string representation of this hashtable object in the form of a set of entries , enclosed in braces and separated by the ascii characters " , " comma and space   |||   to string
returns a shallow copy of this identity hash map : the keys and values themselves are not cloned   |||   clone
returns a shallow copy of this linked list   |||   clone
returns true if this list contains all of the elements of the specified collection   |||   contains all
retains only the elements in this list that are contained in the specified collection optional operation   |||   retain all
removes from the list the last element that was returned by next or previous optional operation   |||   remove
returns a set of the keys contained only in this resource bundle   |||   handle key set
resets the builder to its initial , empty state   |||   clear
sets the language   |||   set language
resets the builder to match the provided locale   |||   set locale
sets the script   |||   set script
returns true if this locale is equal to another object   |||   equals
returns a name for the locale that is appropriate for display to the user   |||   get display name
returns a name for the locale ' s variant code that is appropriate for display to the user   |||   get display variant
returns a view of the portion of this set whose elements range from from element , inclusive , to to element , exclusive   |||   sub set
returns 0 if the arguments are identical and c comparea , b otherwise   |||   compare
checks that the specified object reference is not null   |||   require non null
deletes an observer from the set of observers of this object   |||   delete observer
if a value is present , and the value matches the given predicate , return an optional describing the value , otherwise return an empty optional   |||   filter
returns an optional describing the specified value , if non - null , otherwise returns an empty optional   |||   of nullable
if a value is present in this optional long , returns the value , otherwise throws no such element exception   |||   get as long
returns the next int element in the iteration   |||   next int
returns true if this queue contains the specified element   |||   contains
returns an iterator over the elements in this queue   |||   iterator
returns an effectively unlimited stream of pseudorandom double values , each between zero inclusive and one exclusive   |||   doubles
returns a stream producing the given stream size number of pseudorandom int values   |||   ints
returns the next pseudorandom , uniformly distributed int value from this random number generator ' s sequence   |||   next int
converts the given bundle name to the form required by the class loader get resource method by replacing all occurrences of ' ' in bundle name with ' / ' and appending a ' ' and the given file suffix   |||   to resource name
gets a resource bundle using the specified base name and locale , and the caller ' s class loader   |||   get bundle
closes this scanner   |||   close
returns true if the next token in this scanner ' s input can be interpreted as a boolean value using a case insensitive pattern created from the string " true|false "   |||   has next boolean
returns true if there is another line in the input of this scanner   |||   has next line
returns true if the next token in this scanner ' s input can be interpreted as a short value in the specified radix using the next short method   |||   has next short
returns the io exception last thrown by this scanner ' s underlying readable   |||   io exception
the remove operation is not supported by this implementation of iterator   |||   remove
returns the string representation of this scanner   |||   to string
sets this scanner ' s locale to the specified locale   |||   use locale
removes the specified element from this set if it is present optional operation   |||   remove
compares the equality of two simple time zone objects   |||   equals
sets the daylight saving time starting year   |||   set start year
returns a string representation of this time zone   |||   to string
if this spliterator ' s source is sorted by a comparator , returns that comparator   |||   get comparator
creates an empty spliterator   |||   empty spliterator
creates an primitive iterator of int from a spliterator of int   |||   iterator
returns an effectively unlimited stream of pseudorandom double values from this generator and / or one split from it ; each value conforms to the given origin inclusive and bound exclusive   |||   doubles
returns a pseudorandom double value between zero inclusive and one exclusive   |||   next double
returns a pseudorandom int value between the specified origin inclusive and the specified bound exclusive   |||   next int
tests if this stack is empty   |||   empty
tests if there are more tokens available from this tokenizer ' s string   |||   has more tokens
returns the next token from this string tokenizer   |||   next token
schedules the specified task for execution after the specified delay   |||   schedule
the action to be performed by this timer task   |||   run
returns a name in the specified style of this time zone suitable for presentation to the user in the default locale   |||   get display name
returns a long standard time name of this time zone suitable for presentation to the user in the specified locale   |||   get display name
returns the most significant 64 bits of this uuid ' s 128 bit value   |||   get most significant bits
returns a hash code for this uuid   |||   hash code
returns the last component of the vector   |||   last element
removes from this vector all of its elements that are contained in the specified collection   |||   remove all
trims the capacity of this vector to be the vector ' s current size   |||   trim to size
executes the given tasks , returning a list of futures holding their status and results when all complete   |||   invoke all
removes at most the given number of available elements from this queue and adds them to the given collection   |||   drain to
returns a new completion stage that , when either this or the other given stage complete normally , is executed with the corresponding result as argument to the supplied action   |||   accept either
returns a new completion stage that , when either this or the other given stage complete normally , is executed using the supplied executor , with the corresponding result as argument to the supplied function   |||   accept either async
if not already completed , completes this completable future with a cancellation exception   |||   cancel
returns a new completion stage that , when this stage completes either normally or exceptionally , is executed with this stage ' s result and exception as arguments to the supplied function   |||   handle
returns a new completion stage that , when this and the other given stage complete normally , executes the given action using this stage ' s default asynchronous execution facility   |||   run after both async
returns a new completable future that is asynchronously completed by a task running in the given executor with the value obtained by calling the given supplier   |||   supply async
returns a new completion stage that , when this and the other given stage complete normally , is executed using this stage ' s default asynchronous execution facility , with the two results as arguments to the supplied action   |||   then accept both async
returns this completable future   |||   to completable future
returns a new completion stage with the same result or exception as this stage , that executes the given action when this stage completes   |||   when complete
returns the result of accumulating the given transformation of all key , value pairs using the given reducer to combine values , or null if none   |||   reduce
returns the result of accumulating all keys using the given reducer to combine values , or null if none   |||   reduce keys
inserts the specified element at the tail of this queue   |||   offer
returns a shallow copy of this concurrent skip list set instance   |||   clone
returns a spliterator over the elements in this list   |||   spliterator
decrements the count of the latch , releasing all waiting threads if the count reaches zero   |||   count down
adds atomically the given value to the pending count   |||   add to pending count
if this task has not completed , attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path , if any are known to exist   |||   help complete
sets the pending count to the given value   |||   set pending count
returns the number of parties required to trip this barrier   |||   get parties
creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue   |||   new fixed thread pool
creates an executor that uses a single worker thread operating off an unbounded queue   |||   new single thread executor
returns a thread factory used to create new threads that have the same permissions as the current thread   |||   privileged thread factory
returns true if this pool uses local first - in - first - out scheduling mode for forked tasks that are never joined   |||   get async mode
returns the number of worker threads that have started but not yet terminated   |||   get pool size
returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks   |||   get uncaught exception handler
returns true if this pool has been shut down   |||   is shutdown
completes this task , and if not already aborted or cancelled , returning the given value as the result of subsequent invocations of join and related operations   |||   complete
forks the given tasks , returning when is done holds for each task or an unchecked exception is encountered , in which case the exception is rethrown   |||   invoke all
returns true if this task was cancelled before it completed normally   |||   is cancelled
resets the internal bookkeeping state of this task , allowing a subsequent fork   |||   reinitialize
arrives at this phaser , without waiting for others to arrive   |||   arrive
returns the number of registered parties that have arrived at the current phase of this phaser   |||   get arrived parties
gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown   |||   get execute existing delayed tasks after shutdown policy
returns the task queue used by this executor   |||   get queue
sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown   |||   set execute existing delayed tasks after shutdown policy
acquires a permit from this semaphore , blocking until one is available   |||   acquire uninterruptibly
releases the given number of permits , returning them to the semaphore   |||   release
acquires a permit from this semaphore , if one becomes available within the given waiting time and the current thread has not been interrupted   |||   try acquire
always returns false   |||   remove
returns the thread factory used to create new threads   |||   get thread factory
method invoked when the executor has terminated   |||   terminated
returns a string identifying this pool , as well as its state , including indications of run state and estimated worker and task counts   |||   to string
equivalent to days convertduration , this   |||   to days
sets to the given value   |||   set
atomically updates the current value with the results of applying the given function , returning the updated value   |||   update and get
atomically adds the given value to the element at index i   |||   add and get
atomically updates the element at index i with the results of applying the given function , returning the previous value   |||   get and update
returns the string representation of the current values of array   |||   to string
atomically sets the element at position i to the given updated value if the current value = = the expected value   |||   weak compare and set
returns the current value of the mark   |||   is marked
returns the current value of the stamp   |||   get stamp
unconditionally sets the value of both the reference and stamp   |||   set
returns the sum as a double after a widening primitive conversion   |||   double value
implements timed condition wait   |||   await
returns true if the given thread is currently queued   |||   is queued
attempts to set the state to reflect a release in shared mode   |||   try release shared
causes the current thread to wait until it is signalled or interrupted , or the specified deadline elapses   |||   await until
acquires the lock unless the current thread is interrupted   |||   lock interruptibly
releases the lock   |||   unlock
returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked , or null if not blocked   |||   get blocker
queries the number of holds on this lock by the current thread   |||   get hold count
returns an estimate of the number of threads waiting on the given condition associated with this lock   |||   get wait queue length
queries the number of reentrant write holds on this lock by the current thread   |||   get write hold count
acquires the read lock unless the current thread is interrupted   |||   lock interruptibly
queries the number of holds on this write lock by the current thread   |||   get hold count
acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted   |||   try lock
returns a stamp that can later be validated , or zero if exclusively locked   |||   try optimistic read
releases the write lock if it is held , without requiring a stamp value   |||   try unlock write
exclusively acquires the lock , blocking if necessary until available   |||   write lock
performs this operation on the given arguments   |||   accept
applies this function to the given arguments   |||   apply
gets a result   |||   get as double
returns a unary operator that always returns its input argument   |||   identity
gets a result   |||   get as long
applies this operator to the given operand   |||   apply as long
compares the specified attributes object with this map for equality   |||   equals
returns the value of the specified attributes name , or null if the attribute was not found   |||   get value
returns the attributes for the specified entry name   |||   get attributes
deprecated the dependency on property change listener creates a significant impediment to future modularization of the java platform this method will be removed in a future release applications that need to monitor progress of the packer can poll the value of the progress property instead   |||   add property change listener
the error method is called when a handler failure occurs   |||   error
format and publish a log record   |||   publish
get the current filter for this handler   |||   get filter
check if this handler would actually log a given log record   |||   is loggable
protected convenience method to report an error to this handler ' s error manager   |||   report error
return the level ' s localization resource bundle name , or null if no localization bundle is defined   |||   get resource bundle name
log a config message   |||   config
log a method return   |||   exiting
return the parent for this logger   |||   get parent
log an info message   |||   info
log a lazily constructed message , with associated throwable information   |||   log
log a message , specifying source class and method , with no arguments   |||   logp
log a message , specifying source class and method , with associated throwable information   |||   logp
log throwing an exception   |||   throwing
deprecated the dependency on property change listener creates a significant impediment to future modularization of the java platform this method will be removed in a future release the global log manager can detect changes to the logging configuration by overridding the read configuration method   |||   add property change listener
returns logging mx bean for managing loggers   |||   get logging mxb ean
get the sequence number   |||   get sequence number
get the name of the class that allegedly issued the logging request   |||   get source class name
set the logging message level , for example level severe   |||   set level
set the localization resource bundle name   |||   set resource bundle name
get the push level   |||   get push level
implements the clear method as per the specification in preferences clear   |||   clear
this method is invoked with this node locked   |||   flush spi
implements the get double method as per the specification in preferences get double string , double   |||   get double
implements the put float method as per the specification in preferences put float string , float   |||   put float
put the given key - value association into this preference node   |||   put spi
returns the double value represented by the string associated with the specified key in this preference node   |||   get double
returns true if the named preference node exists in the same tree as this node   |||   node exists
associates the specified value with the specified key in this preference node   |||   put
returns the system root preference node   |||   system root
implements a non - terminal append - and - replace step   |||   append replacement
attempts to match the entire region against the pattern   |||   matches
returns true if more input could change a positive match into a negative one   |||   require end
returns the start index of the subsequence captured by the given named - capturing group during the previous match operation   |||   start
returns the start index of the match   |||   start
returns a literal pattern string for the specified string   |||   quote
returns a multi - line string containing the description of the syntax error and its index , the erroneous regular - expression pattern , and a visual indication of the error index within the pattern   |||   get message
returns true if the given locale is supported by this locale service provider   |||   is supported locale
returns a generic name for the given time zone id that ' s suitable for presentation to the user in the specified locale   |||   get generic display name
returns an equivalent stream that is unordered   |||   unordered
perform the final transformation from the intermediate accumulation type a to the final result type r   |||   finisher
returns a concurrent collector implementing a " group by " operation on input elements of type t , grouping elements according to a classification function   |||   grouping by concurrent
returns a collector that produces the minimal element according to a given comparator , described as an optional   |||   min by
returns a collector that produces the sum of a double - valued function applied to the input elements   |||   summing double
returns a collector that accumulates the input elements into a new collection , in encounter order   |||   to collection
returns an infinite sequential unordered stream where each element is generated by the provided double supplier   |||   generate
returns a long stream consisting of the results of applying the given function to the elements of this stream   |||   map to long
returns a stream consisting of the elements of this stream , each boxed to an integer   |||   boxed
returns a stream consisting of the elements of this stream , each boxed to a long   |||   boxed
performs a mutable reduction operation on the elements of this stream using a collector   |||   collect
returns an optional describing the first element of this stream , or an empty optional if the stream is empty   |||   find first
returns the minimum element of this stream according to the provided comparator   |||   min
performs a reduction on the elements of this stream , using an associative accumulation function , and returns an optional describing the reduced value , if any   |||   reduce
reads a byte   |||   read
returns the current checksum value   |||   get value
resets the checksum to its initial value   |||   reset
updates the crc - 32 checksum with the specified array of bytes   |||   update
returns true if the end of the compressed data output stream has been reached   |||   finished
returns the total number of compressed bytes output so far   |||   get bytes written
returns 0 after eof has been reached , otherwise always return 1   |||   available
always returns false because this input stream does not support the mark and reset methods   |||   mark supported
reads a single byte of compressed data from the input stream   |||   read
writes next block of compressed data to the output stream   |||   deflate
uncompresses bytes into specified buffer   |||   inflate
returns true if a preset dictionary is needed for decompression   |||   needs dictionary
skips specified number of bytes of uncompressed data   |||   skip
returns the last modification time of the entry   |||   get last modified time
returns the uncompressed size of the entry data   |||   get size
sets the last modification time of the entry   |||   set time
gets localized string describing the key using the default locale   |||   to display string
gets the accessible relation set associated with an object   |||   get accessible relation set
cuts the text between two indices into the system clipboard   |||   cut
returns the accessible text sequence after a given index   |||   get text sequence after
returns the number of accessible actions available in this link if there are more than one , the first one is not considered the " default " action of this link object e g   |||   get accessible action count
gets the description of the icon   |||   get accessible icon description
gets the height of the icon   |||   get accessible icon height
returns a key binding for this object   |||   get accessible key binding
returns the key for this relation   |||   get key
removes all the relations from the current relation set   |||   clear
checks if the current state is in the state set   |||   contains
returns the description text of the specified column in the table   |||   get accessible column description
returns the selected columns in a table   |||   get selected accessible columns
sets the caption for the table   |||   set accessible caption
return the human presentable name   |||   get human presentable name
get all the available commands for this type   |||   get all commands
return the data in its preferred object form   |||   get content
this method returns an output stream where the data can be written and throws the appropriate exception if it can not do so   |||   get output stream
return the default file type map for the system   |||   get default file type map
get all the available commands in all mailcap files known to this instance of mailcap command map for this mime type   |||   get all commands
retrieve the value associated with the given name , or null if there is no current association   |||   get parameter
set the value to be associated with the given name , replacing any previous association   |||   set parameter
return the number of name - value pairs in this list   |||   size
the get input stream method from the url   |||   get input stream
return the url used to create this data source   |||   get url
returns an empty iterable of completions   |||   get completions
initializes the processor with the processing environment by setting the processing env field to the value of the processing env argument   |||   init
prints a message of the specified kind at the location of the annotation mirror of the annotated element   |||   print message
returns the root elements for annotation processing generated by the prior round   |||   get root elements
finishes a multiple - part encryption or decryption operation , depending on how this cipher was initialized   |||   do final
returns the initialization vector iv in a new buffer   |||   get iv
returns the block size in bytes   |||   engine get block size
returns the key size of the given key object in bits   |||   engine get key size
returns the parameters used with this cipher   |||   engine get parameters
initializes this cipher with a key , a set of algorithm parameters , and a source of randomness   |||   engine init
continues a multi - part update of the additional authentication data aad , using a subset of the provided buffer   |||   engine update aad
returns the exemption mechanism name of this exemption mechanism object   |||   get name
executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement   |||   do phase
generates a secret key   |||   generate key
returns the provider of this mac object   |||   get provider
returns the algorithm that was used to seal this object   |||   get algorithm
returns the algorithm name of this secret key factory object   |||   get algorithm
translates a key object , whose provider may be unknown or potentially untrusted , into a corresponding key object of this secret - key factory   |||   translate key
returns the des key material   |||   get key
returns the size in bits of the random exponent private value   |||   get exponent size
returns the prime modulus p   |||   get p
returns a copy of the salt or null if not specified   |||   get salt
returns the effective key size in bits   |||   get effective key bits
returns the word size in bits   |||   get word size
returns the name of the algorithm associated with this secret key   |||   get algorithm
returns the currently set rendered image , or null if only a raster is available   |||   get rendered image
sets the current rendered image   |||   set rendered image
sets the list of thumbnails to a new list of buffered images , or to null   |||   set thumbnails
returns whatever iio param controller is currently installed   |||   get controller
returns an iterator containing all currently registered image writers that claim to be able to encode files with the given suffix   |||   get image writers by suffix
returns a buffered image as the result of decoding a supplied image input stream with an image reader chosen automatically from among those currently registered   |||   read
returns a buffered image as the result of decoding a supplied url with an image reader chosen automatically from among those currently registered   |||   read
adds an iio read warning listener to the list of registered warning listeners   |||   add iior ead warning listener
returns true if this plug - in supports reading just a raster of pixel data   |||   can read raster
returns the height in pixels of the given image within the input source   |||   get height
returns the x coordinate of the upper - left corner of tile 0 , 0 in the given image   |||   get tile grid xo ffset
returns true if the storage format of the given image places no inherent impediment on random access to pixels   |||   is random access easy
broadcasts the completion of an sequence of image reads to all registered iio read progress listeners by calling their sequence complete method   |||   process sequence complete
broadcasts the completion of a thumbnail read to all registered iio read progress listeners by calling their thumbnail complete method   |||   process thumbnail complete
returns an iterator containing all the images , thumbnails , and metadata , starting at the index given by get min index , from the input source in the form of iio image objects   |||   read all
returns true if the image format understood by this reader supports thumbnail preview images associated with it   |||   reader supports thumbnails
restores the image reader to its initial state   |||   reset
returns the number of the progressive passes that will be decoded   |||   get source num progressive passes
if the image is able to be rendered at an arbitrary size , sets the source width and height to the supplied values   |||   set source render size
returns a specifier for a banded image format that will use a component color model and a banded sample model to store each channel in a separate array   |||   create banded
returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type   |||   create grayscale
returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type   |||   create grayscale
returns true if the writer can write out images as a series of passes of progressively increasing quality   |||   can write progressive
returns the currently set compression type , or null if none has been set   |||   get compression type
returns the current mode for writing the stream in a progressive manner   |||   get progressive mode
returns the height of each tile in an image as it will be written to the output stream   |||   get tile height
requests that any current write operation be aborted   |||   abort
adds an iio write warning listener to the list of registered warning listeners   |||   add iiow rite warning listener
returns true if the writer supports the insertion of a new image at the given index   |||   can insert image
returns true if the writer supports the removal of an existing image at the given index   |||   can remove image
returns true if the writer allows pixels of the given image to be replaced using the replace pixels methods   |||   can replace pixels
returns true if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output   |||   can write empty
completes the writing of a new image that was begun with a prior call to prepare write empty   |||   end write empty
completes the writing of a sequence of images begun with prepare write sequence   |||   end write sequence
prepares the writer to handle a series of calls to the replace pixels methods   |||   prepare replace pixels
broadcasts a warning message to all registered iio write warning listeners by calling their warning occurred method   |||   process warning occurred
removes all currently registered iio write warning listener objects   |||   remove all iiow rite warning listeners
replaces a portion of an image already present in the output with a portion of the given raster   |||   replace pixels
replaces the stream metadata in the output with new information   |||   replace stream metadata
reports that an image write operation is beginning   |||   image started
reports that a thumbnail write operation is beginning   |||   thumbnail started
returns an xml dom node object that represents the root of a tree of metadata contained within this object according to the conventions defined by a given metadata format   |||   get as tree
returns the name of the " native " metadata format for this plug - in , which typically allows for lossless encoding and transmission of the metadata stored in the format handled by this plug - in   |||   get native metadata format name
sets the iio metadata controller to be used to provide settings for this iio metadata object when the activate controller method is called , overriding any default controller   |||   set controller
returns the minimum number of list items that may be used to define this attribute   |||   get attribute list min length
returns the maximum legal value for the attribute   |||   get attribute max value
returns an array of strings listing the names of the attributes that may be associated with the named element   |||   get attribute names
returns a string containing a description of the named element , or null   |||   get element description
returns the minimum legal value for the object reference within the named element   |||   get object min value
this dom level 3 method is not supported for iio metadata node and will throw a dom exception   |||   get base uri
returns the first child of this node , or null if the node has no children   |||   get first child
returns the last child of this node , or null if the node has no children   |||   get last child
returns the node name associated with this node   |||   get node name
this dom level 3 method is not supported for iio metadata node and will throw a dom exception   |||   get text content
equivalent to has attributelocal name   |||   has attribute ns
returns whether this node if it is an element has any attributes   |||   has attributes
does nothing , since iio metadata nodes do not contain text children   |||   normalize
removes an attribute by name   |||   remove attribute
tells the writer to generate optimized huffman tables for the image as part of the writing process   |||   set optimize huffman tables
removes any previous compression quality setting   |||   unset compression
a callback that will be called exactly once after the spi class has been instantiated and registered in a service registry   |||   on registration
returns an instance of the image reader implementation associated with this service provider   |||   create reader instance
returns the name of the " native " stream metadata format for this plug - in , which typically allows for lossless encoding and transmission of the stream metadata stored in the format handled by this plug - in   |||   get native stream metadata format name
returns the fully - qualified class name of the image reader or image writer plug - in associated with this service provider   |||   get plugin class name
returns the fully qualified class name of an image writer spi class that generates iio metadata objects that may be used as input to this transcoder   |||   get writer service provider name
returns an iterator of class objects indicating the current set of categories   |||   get categories
returns the currently registered service provider object that is of the given class type   |||   get service provider by class
returns false since this image input stream does not maintain a main memory cache   |||   is cached memory
discards the initial portion of the stream prior to the indicated position   |||   flush before
returns the length of the underlying file , or - 1 if it is unknown   |||   length
returns the length of the data of interest within the byte array returned by get data   |||   get length
reads 4 bytes from the stream , and conceptually concatenates them according to the current byte order and returns the result as a float   |||   read float
reads a byte from the stream , and conceptually converts it to an int , masks it with 0xff in order to strip off any sign - extension bits , and returns it as a byte value   |||   read unsigned byte
reads two bytes from the stream , and conceptually concatenates them according to the current byte order , converts the resulting value to an int , masks it with 0xffff in order to strip off any sign - extension buts , and returns the result as an unsigned int value   |||   read unsigned short
a convenience method that calls readb , 0 , b length   |||   read
writes a double value , which is comprised of four bytes , to the output stream   |||   write double
writes a sequence of shorts to the stream at the current position   |||   write shorts
returns whether or not name is a syntactically valid qualified name in the latest source version   |||   is name
visits an array value in an annotation   |||   visit array
visits a float value in an annotation   |||   visit float
returns true if the argument represents the same element as this , or false otherwise   |||   equals
returns true if this is a kind of field : either field or enum constant   |||   is field
returns the default value if this executable is an annotation type element   |||   get default value
returns null since a package is not enclosed by another element   |||   get enclosing element
returns the direct superclass of this type element   |||   get superclass
returns the bounds of this type parameter   |||   get bounds
returns the additional argument   |||   get argument
returns the unknown element   |||   get unknown element
returns the enclosing element of this variable   |||   get enclosing element
returns the type mirrors corresponding to the types being accessed   |||   get type mirrors
returns an informative string representation of this type   |||   to string
visits a type   |||   visit
visits a primitive type   |||   visit primitive
visits any type mirror as if by passing itself to that type mirror ' s accept method and passing null for the additional parameter   |||   visit
returns a set of types in elements   |||   types in
visits a variable element , dispatching to the visit method for the specific kind of variable , enum constant , exception parameter , field , local variable , parameter , or resource variable   |||   visit variable
visits a resource variable variable element by calling visit unknown   |||   visit variable as resource variable
return a name with the same sequence of characters as the argument   |||   get name
iterates over the given elements and calls scan element , p on each one   |||   scan
the default action for visit methods   |||   default action
visits a package pseudo - type by calling default action   |||   visit no type as package
returns the type of an element when that element is viewed as a member of , or otherwise directly contained by , a given type   |||   as member of
returns the type corresponding to a type element and actual type arguments , given a containing type of which it is a member   |||   get declared type
returns the null type   |||   get null type
returns a primitive type   |||   get primitive type
tests whether the signature of one method is a subsignature of another   |||   is subsignature
invoked before sending the specified notification to the listener   |||   is notification enabled
sets the element at the position specified to be the attribute specified   |||   set
sets descriptor full replace   |||   set descriptor
get the values of several attributes of the dynamic mbean   |||   get attributes
this operation is unsupported since this class is immutable   |||   set field
whether new values can be written to the attribute   |||   is writable
return the actual exception thrown   |||   get cause
compare this mbean feature info to another   |||   equals
returns the array of strings in dot notation containing the notification types that the mbean may emit   |||   get notif types
compare this mbean operation info to another   |||   equals
adds a listener to a registered mbean   |||   add notification listener
gets the value of a specific attribute of a named mbean   |||   get attribute
returns true if the mbean specified is an instance of the specified class , false otherwise   |||   is instance of
returns an array indicating , for each notification this mbean may send , the name of the java class of the notification and the notification type   |||   get notification info
returns the full name of the jmx specification implemented by this product   |||   get specification name
the name of the mbean within the mbean server to which methods are forwarded   |||   get object name
get the notification sequence number   |||   get sequence number
set the notification sequence number   |||   set sequence number
set the notification timestamp   |||   set time stamp
compares the current object name with another object name   |||   equals
returns the canonical form of the name ; that is , a string representation where the properties are sorted in lexical order   |||   get canonical name
returns a string representation of the list of key properties specified at creation time   |||   get key property list string
returns a hash code for this object name   |||   hash code
instantiates this mbean instance with the data found for the mbean in the persistent store   |||   load
returns a query expression that is the conjunction of two other query expressions   |||   and
returns a new attribute expression   |||   attr
returns a query expression that represents a " greater than or equal to " constraint on two values   |||   geq
returns a query expression that represents a " less than or equal to " constraint on two values   |||   leq
returns a query expression that is the disjunction of two other query expressions   |||   or
customization hook : get the description that will be used in the mbean attribute info returned by this mbean   |||   get description
customization hook : get the name that will be used for the sequence mbean parameter info of the mbean constructor info returned by this mbean   |||   get parameter name
allows the m - let to perform any operations needed after having been registered in the mbean server or after the registration has failed   |||   post register
sets the instance handle of the object against which to execute all methods in this model mbean management interface mbean info and descriptors   |||   set managed resource
gets a copy of the associated descriptor for the model mbean attribute info   |||   get descriptor
sets associated descriptor full replace for the model mbean attribute descriptor   |||   set descriptor
returns a copy of the associated descriptor   |||   get descriptor
sets associated descriptor full replace of model mbean constructor info   |||   set descriptor
returns a descriptor requested by name and descriptor type   |||   get descriptor
returns a model mbean operation info requested by name   |||   get operation
returns a copy of the associated descriptor for the model mbean notification info   |||   get descriptor
sets associated descriptor full replace for the model mbean notification info if the new descriptor is null , then the associated descriptor reverts to a default descriptor   |||   set descriptor
returns the value of a specific attribute defined for this model mbean   |||   get attribute
return the class loader repository used to perform class loading   |||   get class loader repository
returns a notification info object containing the name of the java class of the notification and the notification types sent by the counter monitor   |||   get notification info
deprecated as of jmx 1 2 , replaced by get threshold object name   |||   get threshold
stops the counter monitor   |||   stop
gets the threshold value for the specified mbean   |||   get threshold
sets the initial threshold value common to all observed mbeans   |||   set init threshold
gets the high threshold value common to all observed mbeans   |||   get high threshold
sets the high and the low threshold values   |||   set thresholds
adds the specified object in the set of observed mbeans , if this object is not already present   |||   add observed object
sets the attribute to observe   |||   set observed attribute
returns a notification info object containing the name of the java class of the notification and the notification types sent by the string monitor   |||   get notification info
gets the differing notification ' s on / off switch value common to all observed mbeans   |||   get notify differ
sets the matching notification ' s on / off switch value common to all observed mbeans   |||   set notify match
sets the differing notification ' s on / off switch value   |||   set notify differ
sets the matching notification ' s on / off switch value   |||   set notify match
returns the dimension of arrays described by this array type instance   |||   get dimension
compares the specified obj parameter with this composite data instance for equality   |||   equals
return the composite data that was supplied to the constructor   |||   get composite data
returns the hash code value for this composite data support instance   |||   hash code
return a composite data corresponding to the values in this object   |||   to composite data
returns the open type of the item whose name is item name , or null if this composite type instance does not define any item whose name is item name   |||   get type
returns the hash code value for this composite type instance   |||   hash code
returns true if the attribute described by this open mbean attribute info instance is accessed through a is xxx getter applies only to boolean and boolean values , false otherwise   |||   is is
returns the name of the constructor described by this open mbean constructor info instance   |||   get name
returns the fully qualified java class name of the open mbean instances this open mbean info describes   |||   get class name
compares the specified obj parameter with this open mbean info support instance for equality   |||   equals
compares the specified obj parameter with this open mbean operation info instance for equality   |||   equals
returns a string representation of this open mbean operation info instance   |||   to string
returns a string representation of this open mbean operation info support instance   |||   to string
returns the open type of the values of the parameter described by this open mbean parameter info instance   |||   get open type
returns true if this parameter has a specified default value , or false otherwise   |||   has default value
returns an unmodifiable set of legal values for the parameter described by this open mbean parameter info support instance , if specified , or null otherwise   |||   get legal values
returns the open type for the values of the parameter described by this open mbean parameter info support instance   |||   get open type
returns true if this open mbean parameter info support instance specifies a non - null maximal value for the described parameter , false otherwise   |||   has max value
returns the name of this open type instance   |||   get type name
returns true if the open data values this open type describes are arrays , false otherwise   |||   is array
returns the hash code value for this simple type instance   |||   hash code
returns a set view of the keys ie the index values of the composite data values ie the rows contained in this tabular data instance   |||   key set
returns the hash code value for this tabular data support instance   |||   hash code
this method simply calls put composite data value and therefore ignores its key parameter which can be null   |||   put
disables any mbean server notification all object names are deselected   |||   disable all object names
enables mbean server notifications concerning given object name   |||   enable object name
sets the given roles   |||   set roles
returns new value of updated role only for role update   |||   get new role value
creates a simple relation represented by a relation support object of given relation type , and adds it in the relation service   |||   create relation
creates a relation type a relation type support object with given role infos provided by the role info objects , and adds it in the relation service   |||   create relation type
retrieves the mbeans associated to given one in a relation   |||   find associated mb eans
sends a notification relation notification for a relation removal   |||   send relation removal notification
handles update of the relation service role map for the update of given role in given relation   |||   update role map
returns a string for the given role value   |||   role value to string
inserts all of the elements in the role list specified into this list , starting at the specified position , in the order in which they are returned by the iterator of the role list specified   |||   add all
adds a listener to be informed of changes in connection status   |||   add connection notification listener
creates a connector client for the connector server at the given address   |||   new jmxc onnector
called by a subclass when a new client connection is opened   |||   connection opened
indicates whether some other object is equal to this one   |||   equals
returns the notifications resulting from the query , and the listeners they correspond to   |||   get targeted notifications
the id of the listener to which the notification is targeted   |||   get listener id
handles the method mbean server connection get mbean info object name   |||   get mb ean info
handles the method mbean server connection get object instance object name   |||   get object instance
handles the method mbean server connection remove notification listener object name , object name , notification filter , object   |||   remove notification listener
creates a new client connection as an rmi object exported through jrmp   |||   make client
gets the default class loader used by this connector server   |||   get default class loader
creates a new client connection   |||   new client
creates a new timer notification with the specified type , message and user data and inserts it into the list of notifications with a given date , period and number of occurrences   |||   add notification
gets a copy of the flag indicating whether a periodic notification is executed at fixed - delay or at fixed - rate   |||   get fixed rate
allows the timer mbean to perform any operations it needs before being registered in the mbean server   |||   pre register
determines whether obj is equal to this address   |||   equals
generates the string representation of this binding   |||   to string
generates a copy of this composite name   |||   clone
determines whether this composite name is empty   |||   is empty
initializes the initial context using the supplied environment   |||   init
generates the string representation of this exception   |||   to string
adds the components of a name in order at a specified position within this name   |||   add all
retrieves the components of this name as an enumeration of strings   |||   get all
generates the string representation of this name / class pair   |||   to string
parses a name into its components   |||   parse
closes this enumeration   |||   close
determines whether there are any more elements in the enumeration   |||   has more
add name as the last component in remaining name   |||   append remaining component
sets the resolved object field of this exception   |||   set resolved obj
retrieves the address at index posn   |||   get
deletes the address at index posn from the list of addresses   |||   remove
retrieves the context at which to continue the method   |||   get referral context
adds a new value to the attribute   |||   add
retrieves the number of values in this attribute   |||   size
retrieves the unexecuted modification list   |||   get unexecuted modifications
generates the string representation of this attribute   |||   to string
generates the string representation of this attribute set   |||   to string
creates and binds a new context , along with associated attributes   |||   create subcontext
retrieves the time limit of these search controls in milliseconds   |||   get time limit
retrieves the binding of the object before the change   |||   get old binding
invokes the naming exception thrown method on a listener using this event   |||   dispatch
creates the response object that corresponds to this request   |||   create extended response
retrieves the asn 1 ber encoded value of the ldap extended operation request   |||   get encoded value
retrieves the connection request controls in effect for this context   |||   get connect controls
adds a single rdn at a specified position within this ldap name   |||   add
adds a single component to the end of this ldap name   |||   add
adds the rd ns of a name in order at a specified position within this name   |||   add all
retrieves the context at which to continue the method using the context ' s environment and no controls   |||   get referral context
compares the specified object with this rdn for equality   |||   equals
retrieves the attribute id of the sort key   |||   get attribute id
retrieves the naming exception appropriate for the result code   |||   get exception
creates an extended response object that corresponds to the ldap start tls extended request   |||   create extended response
retrieves the start tls request ' s asn 1 ber encoded value   |||   get encoded value
closes the tls connection gracefully and reverts back to the underlying connection   |||   close
sets the hostname verifier used by negotiate after the tls handshake has completed and the default hostname verification has failed   |||   set hostname verifier
retrieves the object to be bound   |||   get object
creates a context in which to continue a context operation   |||   get continuation context
sets the initial context factory builder to be builder   |||   set initial context factory builder
returns the identity of the peer which was identified as part of defining the session   |||   get peer certificate chain
returns the socket which is the source of this event   |||   get socket
returns the server ' s principal which was established as part of defining the session   |||   get peer principal
returns the server ' s certificate chain which was established as part of defining the session   |||   get server certificates
initializes this factory with a source of key material   |||   init
return the unmodifiable list of the key store builders encapsulated by this object   |||   get parameters
returns a hash code value for this sni host name   |||   hash code
returns a copy of the ssl parameters indicating the default settings for this ssl context   |||   get default sslp arameters
returns a server socket factory object for this context   |||   get server socket factory
returns a socket factory object for this context   |||   engine get socket factory
returns the names of the protocol versions which are currently enabled for use with this ssl engine   |||   get enabled protocols
returns the host name of the peer   |||   get peer host
returns the names of the protocols which could be enabled for use with this ssl engine   |||   get supported protocols
returns whether unwrap byte buffer , byte buffer will accept any more inbound data messages   |||   is inbound done
returns the number of bytes consumed from the input buffer   |||   bytes consumed
returns the number of bytes written to the output buffer   |||   bytes produced
returns a copy of the array of ciphersuites or null if none have been set   |||   get cipher suites
returns whether client authentication should be requested   |||   get want client auth
returns the list of cipher suites which are currently enabled for use by newly accepted connections   |||   get enabled cipher suites
returns true if new ssl sessions may be established by the sockets which are created from this server socket   |||   get enable session creation
gets the current size of the largest application data that is expected when using this session   |||   get application buffer size
returns the time at which this session representation was created , in milliseconds since midnight , january 1 , 1970 utc   |||   get creation time
sets the size of the cache used for storing ssl session objects grouped under this ssl session context   |||   set session cache size
returns the ssl session in use by this connection   |||   get session
controls whether new ssl sessions may be established by this socket   |||   set enable session creation
initializes this factory with a source of certificate authorities and related trust material   |||   engine init
initializes this factory with a source of provider - specific key material   |||   engine init
choose an alias to authenticate the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer if any   |||   choose client alias
determines the doc flavor in which this doc object will supply its piece of print data   |||   get doc flavor
obtains an input stream for extracting byte print data from this doc   |||   get stream for bytes
converts this doc flavor to a string   |||   to string
registers a listener for event occurring during this print job   |||   add print job listener
determines this print service ' s default printing attribute value in the given category   |||   get default attribute value
determines the printing attribute values a client can specify in the given category when setting up a job for this print service   |||   get supported attribute values
determines if this print service supports a specific doc flavor   |||   is doc flavor supported
allows an application to explicitly register a class that implements lookup services   |||   register service provider
get a ui object which may be cast to the requested ui type by the application and used in its user interface   |||   get ui
returns the document format emitted by this print service   |||   get output format
compares the specified object with this attribute set for equality   |||   equals
removes the specified attribute from this attribute set if present   |||   remove
creates an unmodifiable view of the given attribute set   |||   unmodifiable view
adds the specified attribute to this attribute set if it is not already present , first removing any existing in the same attribute category as the specified attribute value   |||   add
returns this resolution attribute ' s feed direction resolution in the given units   |||   get feed resolution
determine the smallest integer in this set - of - integer attribute that is greater than the given value   |||   next
returns a string version of this two - dimensional size attribute   |||   to string
get the printing attribute class which is to be used as the " category " for this printing attribute value   |||   get category
returns whether this document name attribute is equivalent to the passed in object   |||   equals
returns whether this job impressions supported attribute is equivalent to the passed in object   |||   equals
returns whether this job media sheets completed attribute is equivalent to the passed in object   |||   equals
returns the string table for class job state   |||   get string table
returns the enumeration value table for class media tray   |||   get enum value table
get the media size for the specified named media   |||   get media size for name
returns whether this number of documents attribute is equivalent to the passed in object   |||   equals
returns whether this printer make and model attribute is equivalent to the passed in object   |||   equals
returns whether this printer resolution attribute is equivalent to the passed in object   |||   equals
gets the reason for this event   |||   get print event type
called to notify the client that the job was canceled by a user or a program   |||   print job canceled
called to notify the client that an error has occurred that the user might be able to fix   |||   print job requires attention
returns the print service   |||   get print service
delegation call for stub connectorg omg corba orb   |||   connect
delegation call for stub read objectjava io object input stream   |||   read object
sets the orb for this tie   |||   orb
returns a singleton instance of a class that implements the value handler interface   |||   create value handler
delegation call for util is localjavax rmi corba stub   |||   is local
delegation call for util map system exceptionorg omg corba system exception   |||   map system exception
delegation call for util write remote objectorg omg corba portable output stream , java lang object   |||   write remote object
returns the code base for this value handler   |||   get run time code base
returns true if client authentication is required on ssl connections accepted by server sockets created by this factory   |||   get need client auth
set a named value   |||   put
gets the bindings associated with the given scope in this script context   |||   get bindings
sets the value of an attribute in a given scope   |||   set attribute
associates a bindings instance with a particular scope in this script context   |||   set bindings
returns the version of the scripting language supported by this script engine   |||   get language version
returns an immutable list of mimetypes , associated with scripts that can be executed by the engine   |||   get mime types
return a set of private credentials associated with this subject that are instances or subclasses of the specified class   |||   get private credentials
return a set of public credentials associated with this subject that are instances or subclasses of the specified class   |||   get public credentials
query whether this subject is read - only   |||   is read only
get the list of choices   |||   get choices
get the retrieved locale   |||   get locale
determines if this ticket had been forwarded or was issued based on authentication involving a forwarded ticket - granting ticket   |||   is forwarded
returns a key tab instance from a file object that is bound to the specified service principal   |||   get instance
returns the default unbound key tab instance   |||   get unbound instance
returns a hashcode for this key tab   |||   hash code
return the provider of this configuration   |||   get provider
return the type of this configuration   |||   get type
refresh and reload the configuration   |||   engine refresh
gets the issuer distinguished name value from the certificate   |||   get issuer dn
returns the authorization id to check   |||   get authorization id
creates a sasl server for the specified mechanism   |||   create sasl server
returns the iana - registered mechanism name of this sasl client   |||   get mechanism name
unwraps a byte array received from the server   |||   unwrap
unwraps a byte array received from the client   |||   unwrap
obtains the upward or downward pitch offset for this channel   |||   get pitch bend
reports whether two objects are equal   |||   equals
obtains the midi file type   |||   get type
obtains the midi message data   |||   get message
indicates whether a midi file of the file type specified can be written from the sequence indicated   |||   is file type supported
writes a stream of bytes representing a file of the midi file type indicated to the output stream provided   |||   write
returns the number of the bank that contains the instrument whose location this patch specifies   |||   get bank
obtains the current tempo , expressed in microseconds per quarter note   |||   get tempo in mpq
obtains the current solo state for a track   |||   get track solo
prepares the specified track for recording events received on a particular channel   |||   record enable
scales the sequencer ' s actual playback tempo by the factor provided   |||   set tempo factor
determines whether two objects are equal   |||   equals
sets the parameters for a midi message that takes one or two data bytes   |||   set message
obtains a list of instruments contained in this sound bank   |||   get instruments
obtains the default soundbank for the synthesizer , if one exists   |||   get default soundbank
obtains the maximum number of notes that this synthesizer can sound simultaneously   |||   get max polyphony
adds a new event to the track   |||   add
obtains the midi file format of the input stream provided   |||   get midi file format
obtains a soundbank object from the file provided   |||   get soundbank
obtains the length of the stream , expressed in sample frames rather than bytes   |||   get frame length
indicates whether an audio input stream of a specified format can be obtained from an audio input stream of another specified format   |||   is conversion supported
writes a stream of bytes representing an audio file of the specified file type to the output stream provided   |||   write
opens the clip , meaning that it should acquire any required system resources and become operational   |||   open
sets the media position in microseconds   |||   set microsecond position
returns the set of member controls that comprise the compound control   |||   get member controls
indicates whether the line is running   |||   is running
obtains the label for the minimum value , such as " left " or " off "   |||   get min label
synchronizes two or more lines   |||   synchronize
returns the early reflection intensity in decibels   |||   get early reflection intensity
returns the late reflection delay time in microseconds   |||   get late reflection delay
opens the line with the specified format , causing the line to acquire any required system resources and become operational   |||   open
registers the given event listener so that it will be notified when an event occurs on this pooled connection object   |||   add connection event listener
removes the given event listener from the list of components that will be notified when an event occurs on this pooled connection object   |||   remove connection event listener
retrieves a result set object containing the original value of this row set object   |||   get original
retrieves the parameters that have been set for this row set object ' s command   |||   get params
sets the given row set meta data object as the row set meta data object for this row set object   |||   set meta data
sets the designated column ' s normal maximum width in chars to the given int   |||   set column display size
sets the name of the designated column to the given string   |||   set column name
returns the fetch size for this row set object   |||   get fetch size
retrieves the maximum number of rows that this row set object may contain   |||   get max rows
retrieves the jdbc url that this row set object ' s javax sql reader object uses to make a connection with a relational database using a jdbc technology - enabled driver   |||   get url
sets the value of the designated parameter with the given object value   |||   set object
installs the given java util map object as the type map associated with the connection object for this row set object   |||   set type map
deprecated get character stream should be used in its place   |||   set unicode stream
returns an array containing one or more column numbers indicating the columns that form a key that uniquely identifies a row in this cached row set object   |||   get key columns
releases the current contents of this cached row set object and sends a row set changed event to all registered listeners   |||   release
restores this cached row set object to its original value , that is , its value before the last set of changes   |||   restore original
sets the current row in this cached row set object as the original row   |||   set original row
each jdbc row set contains a connection object from the result set or jdbc properties passed to it ' s constructors   |||   commit
retrieves the first warning reported by calls on this jdbc row set object   |||   get row set warnings
sets the designated column as the match column for this row set object   |||   set match column
adds rowset to this join row set object and sets the designated column as the match column   |||   add row set
returns a collection object containing the row set objects that have been added to this join row set object   |||   get row sets
creates a new instance of a jdbc row set   |||   create jdbc row set
retrieves the fully - qualified name of the class in the java programming language to which a value in the designated column will be mapped   |||   get column class name
retrieves the type code one of the java sql types constants for the sql type of the value stored in the designated column   |||   get column type
retrieves the dbms - specific type name for values stored in the designated column   |||   get column type name
retrieves the schema name of the table from which the value in the designated column was derived   |||   get schema name
indicates whether the designated column is definitely not writable , thus readonly   |||   is read only
indicates whether it is possible for a write operation on the designated column to succeed   |||   is writable
sets whether a value stored in the designated column is a cash value to the given boolean   |||   set currency
retrieves the warning chained to this row set warning object   |||   get next warning
reads a web row set object in its xml format from the given reader object   |||   read xml
compares this serial array to the specified object   |||   equals
returns a new array that is a copy of this serial array object   |||   get array
returns a new array that is a copy of a slice of this serial array object , starting with the element at the given index and containing the given number of consecutive elements   |||   get array
returns a hash code for this serial array   |||   hash code
copies the specified number of bytes , starting at the given position , from this serial blob object to another array of bytes   |||   get bytes
writes the given java string to the clob value that this serial clob object represents , at the position pos   |||   set string
sets the sql structured type that this serial ref object references to the given object object   |||   set object
retrieves the next attribute in this sql input impl object as a boolean in the java programming language   |||   read boolean
retrieves the next attribute in this sql input impl object as a double in the java programming language   |||   read double
retrieves the next attribute in this sql input impl object as a java sql time object   |||   read time
writes a ref object in the java programming language to this sql output impl object   |||   write ref
writes a struct object in the java programming language to this sql output impl object   |||   write struct
writes an java sql type datalink object in the java programming language to this sql output impl object   |||   write url
returns the sync provider instance identified by provider id   |||   get instance
returns an enumeration of currently registered synchronization providers   |||   get registered providers
removes the designated currently registered synchronization provider from the factory spi register   |||   unregister provider
returns the current data source lock severity level active in this sync provider implementation   |||   get data source lock
returns a constant indicating the grade of synchronization a row set object can expect from this sync provider object   |||   get provider grade
retrieves the value in the designated column in the current row of this sync resolver object , which is the value in the data source that caused a conflict   |||   get conflict value
sets obj as the value in column index in the current row of the row set object that is being synchronized   |||   set resolved value
return the zero - based offset of the caret   |||   get caret position
returns an array of all the change listeners added to this abstract button with add change listener   |||   get change listeners
returns the icon used by the button when it ' s disabled   |||   get disabled icon
this is overridden to return false if the current icon ' s image is not equal to the passed in image img   |||   image update
gets the content area filled property   |||   is content area filled
sets the horizontal alignment of the icon and text   |||   set horizontal alignment
sets the keyboard mnemonic on the current model   |||   set mnemonic
sets the pressed icon for the button   |||   set pressed icon
calls fire editing canceled   |||   cancel cell editing
notifies all listeners that have registered interest for notification on this event type   |||   fire editing canceled
notifies all listeners that have registered interest for notification on this event type   |||   fire editing stopped
run each change listeners state changed method   |||   fire state changed
adds a property change listener   |||   add property change listener
returns the action names that are bound in this action map   |||   keys
creates a dashed border of the specified paint   |||   create dashed border
gets the accessible context associated with this box   |||   get accessible context
paints this box   |||   paint component
returns the preferred dimensions for this layout , given the components in the specified target container   |||   preferred layout size
not used by this class   |||   remove layout component
removes an action listener from the model   |||   remove action listener
removes a change listener from the model   |||   remove change listener
sets the action command string that gets sent as part of the action event when the button is triggered   |||   set action command
sets or clears the button ' s rollover state   |||   set rollover
set the selected item   |||   set selected item
removes all the mappings from this object   |||   clear
overrides graphics draw chars   |||   draw chars
overrides graphics draw polygon   |||   draw polygon
overrides graphics draw string   |||   draw string
overrides graphics fill oval   |||   fill oval
returns the drawing buffer value   |||   is drawing buffer
sets the number of times that drawing operations will flash   |||   set flash count
sets the time delay of drawing operation flashing   |||   set flash time
sets the stream to which the debug graphics logs drawing operations   |||   set log stream
returns an array of all the change listeners registered on this default bounded range model   |||   get change listeners
returns the group that the button belongs to   |||   get group
when an item ' s state changes , editing is ended   |||   item state changed
forwards the message from the cell editor to the delegate   |||   is cell editable
adds an item at the end of the model   |||   add element
set the value of the selected item   |||   set selected item
this moves the jcomponent and repaints the damaged areas   |||   set bounds for frame
returns an enumeration of the components of this list   |||   elements
searches for the first occurrence of elem , beginning the search at index   |||   index of
removes all components from this list and sets its size to zero   |||   remove all elements
returns an array containing all of the elements in this list in the correct order   |||   to array
returns the first selected index or - 1 if the selection is empty   |||   get min selection index
set the anchor selection index , leaving all selection values unchanged   |||   set anchor selection index
sets the selection mode   |||   set selection mode
invoked when the contents of the underlying model have completely changed   |||   all rows changed
returns the location of index in terms of the underlying model   |||   convert row index to model
returns the underlying model   |||   get model
invoked when rows have been deleted from the underlying model in the specified range inclusive   |||   rows deleted
invoked when rows have been changed in the underlying model between the specified range inclusive   |||   rows updated
invoked when the column in the rows have been updated in the underlying model between the specified range   |||   rows updated
sets the filter that determines which rows , if any , should be hidden from the view   |||   set row filter
returns the value as a string at the specified index   |||   get string value at
generally , the frame should be resized to match it ' s parents bounds   |||   maximize frame
returns whether component visibility is considered when sizing and positioning components   |||   get honors visibility
sets whether a gap between the container and components that touch the border of the container should automatically be created   |||   set auto create container gaps
sets the group that positions and sizes components along the horizontal axis   |||   set horizontal group
sets the group that positions and sizes components along the vertical axis   |||   set vertical group
returns a string representation of this group layout   |||   to string
adds an element representing the preferred gap between the nearest components   |||   add preferred gap
returns the icon ' s width   |||   get icon width
returns the layered pane object for this applet   |||   get layered pane
sets the content pane property   |||   set content pane
sets the border painted flat property , which gives a hint to the look and feel as to the appearance of the check box border   |||   set border painted flat
sets the current preview panel   |||   set preview panel
returns the " prototypical display " value - an object used for the calculation of the display height and width   |||   get prototype display value
causes the combo box to close its popup window   |||   hide popup
determines the visibility of the popup   |||   is popup visible
sets the object that translates a keyboard character into a list selection   |||   set key selection manager
sets the selected item in the combo box display area to the object in the argument   |||   set selected item
returns the component ' s " visible rect rectangle " - the intersection of the visible rectangles for this component and all of its ancestors   |||   compute visible rect
gives the ui delegate an opportunity to define the precise shape of this component for the sake of mouse processing   |||   contains
returns the value of the property with the specified key   |||   get client property
returns the preferred location to display the popup menu in this component ' s coordinate system   |||   get popup location
returns the key strokes that will initiate registered actions   |||   get registered key strokes
returns the tooltip location in this component ' s coordinate system   |||   get tool tip location
returns the tooltip string that has been set with set tool tip text   |||   get tool tip text
returns the string to be used as the tooltip for event   |||   get tool tip text
returns true if the current painting operation on this component is part of a print operation   |||   is painting for print
invoke this method to print the component to the specified graphics   |||   print
prints the component ' s border   |||   print border
overrides process key event to process events   |||   process key event
processes mouse motion events , such as mouse event mouse dragged   |||   process mouse motion event
deprecated as of 1 4 , replaced by focus traversal policy get default component container request focus   |||   request default focus
makes the component visible or invisible   |||   set visible
returns all jinternal frames currently displayed in the desktop   |||   get all frames
selects the next jinternal frame in this desktop pane   |||   select frame
sets the " dragging style " used by the desktop pane   |||   set drag mode
returns the root pane object for this dialog   |||   get root pane
returns a string representation of this jdialog   |||   param string
sets the menubar for this dialog   |||   set jm enu bar
returns the preferred size for the jeditor pane   |||   get preferred size
returns true if a viewport should always force the height of this scrollable to match the height of the viewport   |||   get scrollable tracks viewport height
makes sure that the specified file is viewable , and not hidden   |||   ensure file is visible
returns an array of all the action listeners registered on this file chooser   |||   get action listeners
returns the currently selected file filter   |||   get file filter
returns the filename   |||   get name
returns the file type   |||   get type description
sets the approve button ' s mnemonic using a numeric keycode   |||   set approve button mnemonic
sets the string that goes in the jfile chooser window ' s title bar   |||   set dialog title
sets the list of selected files if the file chooser is set to allow multiple selection   |||   set selected files
clones the abstract formatter   |||   clone
gets the class id for a ui   |||   get uic lass id
sets the operation that will happen by default when the user initiates a " close " on this frame   |||   set default close operation
fires an internal frame closing event and then performs the action specified by the internal frame ' s default close operation   |||   do default close action
returns the content pane for this internal frame   |||   get content pane
always returns true because all jinternal frames must be roots of a focus traversal cycle   |||   is focus cycle root
returns whether the jinternal frame is currently iconified   |||   is icon
returns whether the jinternal frame is the currently " selected " or active frame   |||   is selected
removes the specified internal frame listener so that it no longer receives internal frame events from this internal frame   |||   remove internal frame listener
sets the operation that will happen by default when the user initiates a " close " on this internal frame   |||   set default close operation
does nothing because jinternal frames must always be roots of a focus traversal cycle   |||   set focus cycle root
sets this jinternal frame ' s layered pane property   |||   set layered pane
ensures that , by default , the layout of this component cannot be set   |||   set layout
sets the jinternal frame with which this desktop icon is associated   |||   set internal frame
returns false to indicate that the height of the viewport does not determine the height of the layer , unless the preferred height of the layer is smaller than the height of the viewport   |||   get scrollable tracks viewport height
returns an array of the components in the specified layer   |||   get components in layer
returns the hashtable that maps components to layers   |||   get component to layer
sets the layer property on a jcomponent   |||   put layer
list data listener interval added method   |||   interval added
list selection listener value change method   |||   value changed
scrolls the list within an enclosing viewport to make the specified cell completely visible   |||   ensure index is visible
returns the value of the fixed cell width property   |||   get fixed cell width
returns an array of all the list selection listeners added to this jlist by way of add list selection listener   |||   get list selection listeners
returns the data model that holds the list of items displayed by the jlist component   |||   get model
returns the next list element whose to string value starts with the given prefix   |||   get next match
computes the size of viewport needed to display visible row count rows   |||   get preferred scrollable viewport size
returns a list of all the selected items , in increasing order based on their indices in the list   |||   get selected values list
returns the cell index closest to the given location in the list ' s coordinate system   |||   location to index
sets the list ui , the look and feel object that renders this component   |||   set ui
resets the list ui property by setting it to the value provided by the current look and feel   |||   update ui
removes the nth item from the selection   |||   remove accessible selection
creates a new menu item attached to the specified action object and appends it to the end of this menu   |||   add
creates a new menu item with the specified text and appends it to the end of this menu   |||   add
factory method which creates the jmenu item for actions added to the jmenu   |||   create action component
returns the suggested delay , in milliseconds , before submenus are popped up or down   |||   get delay
returns a string representation of this jmenu   |||   param string
set accelerator is not defined for jmenu   |||   set accelerator
resets the ui property with a value from the current look and feel   |||   update ui
adds a menu key listener to the menu item   |||   add menu key listener
notifies all listeners that have registered interest for notification on this event type   |||   fire menu key released
returns the accessible context associated with this jmenu item   |||   get accessible context
handles a keystroke in a menu   |||   process menu key event
returns the choices the user can make   |||   get options
returns a string representation of this joption pane   |||   param string
sets the option pane ' s message - object   |||   set message
sets the options this pane displays   |||   set options
sets the ui object which implements the l&f for this component   |||   set ui
shows a question - message dialog requesting input from the user and parented to parent component   |||   show input dialog
shows a dialog requesting input from the user parented to parent component with the dialog having the title and message type message type   |||   show input dialog
returns the text contained in this text component   |||   get password
returns a string representation of this jpassword field   |||   param string
adds a menu key listener to the popup menu   |||   add menu key listener
returns this jpopup menu component   |||   get component
lays out the container so that it uses the minimum space needed to display its contents   |||   pack
sets the size of the popup window using a dimension object   |||   set popup size
send a change event , whose source is this jprogress bar , to all change listeners that have registered interest in change events   |||   fire state changed
sets the progress bar ' s orientation to new orientation , which must be swing constants vertical or swing constants horizontal   |||   set orientation
sets the value of the progress string   |||   set string
called by the constructor methods to create the default layout manager   |||   create root layout
returns the value of the default button property   |||   get default button
gets the layered pane used by the root pane   |||   get layered pane
returns the minimum amount of space the layout needs   |||   minimum layout size
returns the delegate that implements the look and feel for this component   |||   get ui
true if the scrollbar knob is being dragged   |||   get value is adjusting
returns the component at the specified corner   |||   get corner
returns the horizontal scroll bar policy value   |||   get horizontal scroll bar policy
returns the vertical scroll bar that controls the viewports vertical view position   |||   get vertical scroll bar
returns the vertical scroll bar policy value   |||   get vertical scroll bar policy
removes the old viewport if there is one ; forces the view position of the new viewport to be in the +x , +y quadrant ; syncs up the row and column headers if there are any with the new viewport ; and finally syncs the scrollbars and headers with the new viewport   |||   set viewport
messages super to set the value , and resets the unit increment set instance variable to true   |||   set unit increment
gets the accessible context associated with this jslider   |||   get accessible context
returns an array of all the change listeners added to this jslider with add change listener   |||   get change listeners
tells if the track area the slider slides in is to be painted   |||   get paint track
determines whether labels are painted on the slider   |||   set paint labels
specifying true makes the knob and the data value it represents resolve to the closest tick mark next to where the user positioned the knob   |||   set snap to ticks
resize the one and only child to completely fill the area within the parents insets   |||   layout container
gets the accessible context for the jspinner   |||   get accessible context
returns an array of all the change listeners added to this jspinner with add change listener   |||   get change listeners
removes a change listener from this spinner   |||   remove change listener
changes current value of the model , typically this value is displayed by the editor   |||   set value
resets the ui property with the value from the current look and feel   |||   update ui
returns the maximum location of the divider from the look and feel implementation   |||   get maximum divider location
sets the component above , or to the left of the divider   |||   set top component
returns an array of all the change listeners added to this jtabbed pane with add change listener   |||   get change listeners
returns the character , as an index , that the look and feel should provide decoration for as representing the mnemonic character   |||   get displayed mnemonic index at
returns the currently selected component for this tabbedpane   |||   get selected component
returns the tab index corresponding to the tab whose bounds intersect the specified location   |||   index at location
inserts a new tab for the given component , at the given index , represented by the given title and / or icon , either of which may be null   |||   insert tab
returns whether or not the tab at index is currently enabled   |||   is enabled at
sets the background color at index to background which can be null , in which case the tab ' s background color will default to the background color of the tabbedpane   |||   set background at
sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run   |||   set tab layout policy
returns the description of the specified column in the table   |||   get accessible column description
sets the description text of the specified column of the table   |||   set accessible column description
returns the column index where a dropped item should be placed in the table   |||   get column
adds the columns from index0 to index1 , inclusive , to the current selection   |||   add column selection interval
invoked when a column is added to the table column model   |||   column added
invoked when a column is repositioned   |||   column moved
maps the index of the row in terms of the view to the underlying table model   |||   convert row index to model
returns true if whenever the model changes , a new row sorter should be created and installed as the table ' s sorter ; otherwise , returns false   |||   get auto create row sorter
returns the number of columns in the column model   |||   get column count
returns the table column model that contains all column information of this table   |||   get column model
returns true if columns can be selected   |||   get column selection allowed
returns the color used to draw grid lines   |||   get grid color
returns the preferred size of the viewport for this table   |||   get preferred scrollable viewport size
gets the amount of empty space , in pixels , between cells   |||   get row margin
returns the number of selected columns   |||   get selected column count
initializes table properties to their default values   |||   initialize local vars
prepares the editor by querying the data model for the value and selection state of the cell at row , column   |||   prepare editor
equivalent to revalidate followed by repaint   |||   resize and repaint
selects the columns from index0 to index1 , inclusive   |||   set column selection interval
sets the height for row to row height , revalidates , and repaints   |||   set row height
creates the default implementation of the model to be used at construction if one isn ' t explicitly given   |||   create default model
determines the offset of the start of the given line   |||   get line start offset
returns the preferred size of the viewport if this component is embedded in a jscroll pane   |||   get preferred scrollable viewport size
sets the line - wrapping policy of the text area   |||   set line wrap
sets the style of wrapping used if the text area is wrapping lines   |||   set wrap style word
returns an array of all the action listeners added to this jtext field with add action listener   |||   get action listeners
returns the number of columns in this text field   |||   get columns
processes action events occurring on this textfield by dispatching them to any registered action listener objects   |||   post action event
creates the editor kit to use by default   |||   create default editor kit
fetches a named non - null style previously added   |||   get style
checks if the button is selected   |||   is selected
returns a properly configured property change listener which updates the control as changes to the action occur , or null if the default property change listener for the control is desired   |||   create action change listener
factory method which creates the jbutton for actions added to the jtool bar   |||   create action component
returns the current orientation of the tool bar   |||   get orientation
paints the tool bar ' s border if the border painted property is true   |||   paint border
sets the margin between the tool bar ' s border and its buttons   |||   set margin
returns the minimum size for the separator   |||   get minimum size
returns the component the tooltip applies to   |||   get component
get the accessible selection associated with this object if one exists   |||   get accessible selection
set the accessible description of this object   |||   set accessible description
set the localized accessible name of this object   |||   set accessible name
tree model node change notification   |||   tree nodes changed
tree model node change notification   |||   tree nodes inserted
this is overriden to do nothing ; empty selection model does not allow a selection   |||   add property change listener
adds the path at the specified row to the current selection   |||   add selection row
notifies all listeners that have registered interest for notification on this event type   |||   fire tree will expand
returns the path to the node that is closest to x , y   |||   get closest path for location
returns the expands selected paths property   |||   get expands selected paths
returns the path identified as the lead   |||   get lead selection path
returns the preferred display size of a jtree   |||   get preferred scrollable viewport size
returns false to indicate that the width of the viewport does not determine the width of the table , unless the preferred width of the tree is smaller than the viewports width   |||   get scrollable tracks viewport width
returns the number of nodes selected   |||   get selection count
returns the number of rows that are displayed in the display area   |||   get visible row count
returns true if the node at the specified display row is collapsed   |||   is collapsed
returns true if the node identified by row is selected   |||   is row selected
sets the scrolls on expand property , which determines whether the tree might scroll to show previously hidden children   |||   set scrolls on expand
selects the rows in the specified interval inclusive   |||   set selection interval
selects the nodes corresponding to each of the specified rows in the display   |||   set selection rows
creates a listener for the view   |||   create view listener
determines whether the specified component is an acceptable choice as the new focus owner   |||   accept
set the anchor selection index   |||   set anchor selection index
returns an icon with a disabled appearance   |||   get disabled icon
convenience method for setting a component ' s border property with a value from the defaults   |||   install border
processes a mouse event   |||   process mouse event
returns the maximum dimensions needed to lay out the components contained in the specified target container   |||   maximum layout size
returns the preferred dimensions for this layout given the components in the specified target container   |||   preferred layout size
returns the shared popup factory which can be used to obtain popups   |||   get shared instance
indicate that the operation is complete   |||   close
specifies the additional note that is displayed along with the progress message   |||   get note
specifies the maximum value   |||   set maximum
specifies the additional note that is displayed along with the progress message   |||   set note
adds window to the list of components that need to be repainted   |||   add dirty region
return the repaint manager for the calling thread given a component   |||   current manager
return the repaint manager for the calling thread given a jcomponent   |||   current manager
returns the content pane   |||   get content pane
returns a row filter that includes entries if the supplied filter does not include the entry   |||   not filter
adds a row sorter listener to receive notification about this row sorter   |||   add row sorter listener
reverses the sort order of the specified column   |||   toggle sort order
lays out the scrollpane   |||   layout container
creates a set of offset / span pairs representing how to lay out a set of components end - to - end   |||   calculate tiled positions
returns the size of all entries   |||   get sizes
returns the last date in the sequence   |||   get end
the current element of the sequence   |||   get value
returns a spring whose minimum , preferred , maximum and value properties are defined by the heights of the minimum size , preferred size , maximum size and size properties of the supplied component   |||   height
links edge e1 of component c1 to edge e2 of component c2 , with a fixed distance between the edges   |||   put constraint
convert a apoint in source coordinate system to destination coordinate system   |||   convert point
convert the rectangle arectangle in source coordinate system to destination coordinate system   |||   convert rectangle
returns the first ancestor of the component which is not an instance of jlayer   |||   get unwrapped parent
returns true if the current thread is an awt event dispatching thread   |||   is event dispatch thread
returns true if the mouse event specifies the left mouse button   |||   is left mouse button
paints a component to the specified graphics   |||   paint component
returns true if the timer coalesces multiple pending action events   |||   is coalesce
returns true if the timer is running   |||   is running
sets the timer ' s initial delay , the time in milliseconds to wait after the timer is started before firing the first event   |||   set initial delay
returns the dismissal delay value   |||   get dismiss delay
when displaying the jtool tip , the tool tip manager chooses to use a lightweight jpanel if it fits   |||   set light weight popup enabled
returns a shared tool tip manager instance   |||   shared instance
this method is called repeatedly during a drag and drop operation to allow the developer to configure properties of , and to return the acceptability of transfers ; with a return value of true indicating that the transfer represented by the given transfer support which contains all of the details of the transfer is acceptable at the current time , and a value of false rejecting the transfer   |||   can import
returns an action that performs paste operations from the clipboard   |||   get paste action
returns the data flavors for this transfer   |||   get data flavors
returns whether or not the given data flavor is supported   |||   is data flavor supported
if the value of key for the given locale is an icon return it , otherwise return null   |||   get icon
if the value of key is an insets return it , otherwise return null   |||   get insets
returns an array of all the property change listeners added to this ui defaults with add property change listener   |||   get property change listeners
if get ui fails for any reason , it calls this method before returning null   |||   get uie rror
removes a resource bundle from the list of resource bundles that are searched for localized defaults   |||   remove resource bundle
creates the actual value retrieved from the ui defaults table   |||   create value
returns a boolean from the defaults which is associated with the key value   |||   get boolean
returns a color from the defaults that is appropriate for the given locale   |||   get color
returns a dimension from the defaults   |||   get dimension
returns the ui defaults from the current look and feel , that were obtained at the time the look and feel was installed   |||   get look and feel defaults
returns an array of all the property change listeners added to this ui manager with add property change listener   |||   get property change listeners
returns a string from the defaults that is appropriate for the given locale   |||   get string
adds the specified look and feel to the set of available look and feels   |||   install look and feel
returns the type of the bevel border   |||   get bevel type
returns the insets of the border   |||   get border insets
does no drawing by default   |||   paint border
returns the color of the border   |||   get line color
returns the basic stroke object used to stroke a shape during the border rendering   |||   get stroke
returns an enum indicating how the baseline of the border changes as the size changes   |||   get baseline resize behavior
returns the title - color of the titled border   |||   get title color
returns the title - position of the titled border   |||   get title position
sets the title of the titled border   |||   set title
sets the title - position of the titled border   |||   set title position
builds a new chooser panel   |||   build chooser
provides a hint to the look and feel as to the index of the character in get display name that should be visually identified as the mnemonic   |||   get displayed mnemonic index
returns the selected color which should be non - null   |||   get selected color
called when the source or one of its ancestors is made visible either by set visibletrue being called or by its being added to the component hierarchy   |||   ancestor added
called when the source or one of its ancestors is made invisible either by set visiblefalse being called or by its being remove from the component hierarchy   |||   ancestor removed
returns the element represented   |||   get element
fetches the index within the element represented   |||   get index
returns the offset within the document of the start of the change   |||   get offset
gives notification that a portion of the document has been removed   |||   remove update
removes the listener as a listener of the specified type   |||   remove
invoked when an internal frame has been closed   |||   internal frame closed
returns the index of the last row whose selection may have changed   |||   get last index
invoked when the mouse is being dragged in a menu component ' s display area   |||   menu drag mouse dragged
invoked when a key has been pressed   |||   menu key pressed
invoked when a key has been typed   |||   menu key typed
this method is called before the popup menu becomes visible   |||   popup menu will become visible
returns the location of index in terms of the model prior to the sort   |||   convert previous row index to model
returns the from index   |||   get from index
tells listeners that a column was repositioned   |||   column moved
an undoable edit happened   |||   undoable edit happened
returns a file object constructed from the given path string   |||   create file object
creates a new file object for f with correct behavior for a file system root directory   |||   create file system root
type description for a file , directory , or folder as it would be displayed in a system file browser   |||   get system type description
used by ui classes to decide whether to display a special icon for a computer node , e g   |||   is computer node
on windows , a file can appear in multiple folders , other than its parent directory in the filesystem   |||   is parent
set the visibility of the popup   |||   set popup visible
notifies this ui delegate that it is time to paint the specified component   |||   update
if the jlayer ' s view component is not null , this returns the result of the view ' s get maximum size method   |||   get maximum size
configures the jlayer this layer ui is set to   |||   install ui
processes hierarchy event occurring on the jlayer or any of its subcomponents   |||   process hierarchy event
processes mouse events occurring on the jlayer or any of its subcomponents   |||   process mouse event
returns the path for passed in row   |||   get path for row
returns whether the arrow button should get the focus   |||   is focus traversable
sets the direction of the arrow   |||   set direction
creates the internal editor component   |||   create editor component
the minimum size is the size of the display area plus insets plus the button   |||   get minimum size
adds keyboard actions to the jcombo box   |||   install keyboard actions
determines if the jcombo box is focus traversable   |||   is focus traversable
hides the popup   |||   set popup visible
implementation of combo popup get mouse motion listener   |||   get mouse motion listener
a utility method used by the event listeners   |||   update list box selection for event
responds to mouse - pressed events on the combo box   |||   mouse pressed
uninstalls the property change listener returned from create property change listener from the jdesktop pane   |||   uninstall listeners
creates a basic file chooser ui implementation for the specified component   |||   create ui
property to remember the directory that is currently selected in the ui   |||   set directory
creates a ui for a jformatted text field   |||   create ui
draw a string with the graphics g at location x , y just like g draw string would   |||   draw string
returns the baseline for the html renderer   |||   get htmlb aseline
check the given string to see if it should trigger the html rendering logic in a non - text component that supports html rendering   |||   is htmls tring
post a window closing - like event to the frame , so that it can be treated like a regular frame   |||   post closing event
this method is called when the user wants to close the frame   |||   close frame
this method is called when the frame is no longer selected   |||   deactivate frame
detects changes in state from the jinternal frame and handles actions   |||   property change
uninitializes this list by calling uninstall listeners , uninstall keyboard actions , and uninstall defaults in order   |||   uninstall ui
invoked when the cursor enters the menu   |||   mouse entered
creates the appropriate object to represent each of the objects in buttons and adds it to container   |||   add button components
recursively creates new jlabel instances to represent d   |||   burst string into
messaged from install components to create a container containing the body of the message   |||   create message area
this determines the amount of the progress bar that should be filled based on the percent done gathered from the model   |||   get amount full
the minimum size for this component is 10   |||   get minimum size
indicates whether the user can absolutely position the thumb with a mouse gesture usually the middle mouse button   |||   get supports absolute positioning
invoked when the mouse exits the scrollbar   |||   mouse exited
returns true if the user is dragging the slider   |||   is dragging
returns true if all the labels from the label table have the same baseline   |||   labels have same baselines
initializes property change listener with a shared object that delegates interesting property change events to protected methods   |||   install listeners
calls uninstall defaults , uninstall listeners , and then removes all of the spinners children   |||   uninstall ui
returns the x argument , since this is used for horizontal splits   |||   get needed location
returns the new position to put the divider at based on the passed in mouse event   |||   position for mouse event
creates and return an instance of jbutton that can be used to collapse the right component in the split pane   |||   create right one touch button
returns the preferred size needed to contain the children   |||   preferred layout size
deprecated as of java 2 platform v1 3   |||   create keyboard resize toggle listener
messaged during a dragging session to move the divider to the passed in location   |||   drag divider to
returns the last drag location of the jsplit pane   |||   get last drag location
installs the keyboard actions for the ui   |||   install keyboard actions
installs the event listeners for the ui   |||   install listeners
messaged to reset the preferred sizes   |||   reset to preferred sizes
uninstalls the ui   |||   uninstall ui
returns the tab the mouse is currently over , or - 1 if the mouse is no longer over any tab   |||   get rollover tab
returns the text view object required to render stylized text html for the specified tab or null if no specialized text rendering is needed for this tab   |||   get text view for tab
return the minimum size of the table   |||   get minimum size
initialize jtable properties , e g   |||   install defaults
gets the allocation to give the root view   |||   get visible editor rect
installs non - rollover borders on all the child components of the jcomponent   |||   install non rollover borders
if the mousex and mousey are in the expand / collapse region of the row , this will toggle the row   |||   check for click in expand control
creates a default cell editor   |||   create default cell editor
creates the object responsible for managing what is expanded , as well as the size of nodes   |||   create layout cache
return current cell renderer , which will either be the trees renderer , or default cell renderer , which ever wasn ' t null   |||   get cell renderer
returns the minimum preferred size   |||   get preferred min size
returns the preferred size to properly display the tree , this is a cover method for get preferred sizec , true   |||   get preferred size
messaged when the user clicks the particular row , this invokes toggle expand state   |||   handle expand control click
intalls the subcomponents of the tree , which is the renderer pane   |||   install components
returns true if mousex and mousey fall in the area of row that is used to expand / collapse the node and the node at row does not represent a leaf   |||   is location in expand control
paints the expand toggle part of a row   |||   paint expand control
sets the row height , this is forwarded to the tree state   |||   set row height
determines whether the node handles are to be displayed   |||   set shows root handles
updates the expanded state of all the descendants of path by getting the expanded descendants from the tree and forwarding to the tree state   |||   update expanded descendants
responsible for getting the size of a particular node   |||   get node dimensions
messaged when the selection changes in the tree we ' re displaying for   |||   value changed
returns the control text font   |||   get control text font
returns the secondary 2 color   |||   get secondary 2
returns the sub - text font   |||   get sub text font
returns the user text font   |||   get user text font
returns the window title font   |||   get window title font
returns a border instance for a desktop icon   |||   get desktop icon border
returns a border instance for a text component   |||   get text border
creates a selection listener for the list of files and directories   |||   create list selection listener
returns the minimum size of the jfile chooser   |||   get minimum size
returns the mouse input adapter that will be installed on the title pane   |||   create border listener
just paint the text gray label disabled foreground rather than in the labels foreground color   |||   paint disabled text
returns the black color of the current theme   |||   get black
returns the control disabled color of the current theme   |||   get control disabled
returns the desktop color of the current theme   |||   get desktop color
returns the menu selected foreground color of the current theme   |||   get menu selected foreground
returns the system text color of the current theme   |||   get system text color
configures the specified component appropriate for the metal look and feel   |||   install ui
invokes supers implementation of install ui to install the necessary state onto the passed in jroot pane to render the metal look and feel implementation of root pane ui   |||   install ui
deprecated - replaced by uninstall listeners jcomponent   |||   uninstall listeners
returns the amount that the thumb goes past the slide bar   |||   get thumb overhang
overridden to do nothing for the java l&f   |||   get tab label shift y
returns the accelerator foreground color   |||   get accelerator foreground
returns the control shadow color   |||   get control shadow
returns the control text color   |||   get control text color
returns the menu disabled foreground color   |||   get menu disabled foreground
returns the menu selected foreground color   |||   get menu selected foreground
returns the primary control shadow color   |||   get primary control shadow
this function converts between the string passed into the client property and the internal representation currently and int   |||   decode line style
invokes the get accessible child method on each ui handled by this object   |||   get accessible child
invokes the get cell bounds method on each ui handled by this object   |||   get cell bounds
creates the component ui objects required to present the target component , placing the objects in the uis vector and returning the component ui object that best represents the component ' s ui   |||   create ui s
creates , initializes , and returns the look and feel specific defaults   |||   get defaults
invokes the get divider location method on each ui handled by this object   |||   get divider location
invokes the get editor kit method on each ui handled by this object   |||   get editor kit
invokes the get row count method on each ui handled by this object   |||   get row count
given parameters for creating a radial gradient paint , this method will create and return a radial gradient paint   |||   decode radial gradient
returns the color for the specified state   |||   get color for state
returns the synth painter that will be used for painting   |||   get painter
returns the textual description of this color type   |||   to string
paints the border   |||   paint border
returns the current synth style factory   |||   get style factory
paints the border of an arrow button   |||   paint arrow button border
paints the background of a color chooser   |||   paint color chooser background
paints the background of a scrollbar   |||   paint scroll bar background
paints the border of a separator   |||   paint separator border
paints the background of the thumb of a slider   |||   paint slider thumb background
paints the border of a spinner   |||   paint spinner border
paints the background of the divider of a split pane   |||   paint split pane divider background
paints the background of a tabbed pane   |||   paint tabbed pane background
paints the background of a toggle button   |||   paint toggle button background
paints the background of a tool bar   |||   paint tool bar background
paints the border of the window containing the tool bar when it has been detached from it ' s primary frame   |||   paint tool bar drag window border
paints the focus indicator for a cell in a tree when it has focus   |||   paint tree cell focus
paints the component ' s text   |||   paint text
lays out the slider   |||   layout
convenience method to get a specific style property whose value is an boolean   |||   get boolean
convenience method to get a specific style property whose value is a number   |||   get int
this implementation does nothing , because the rollover property of the jtool bar class is not used in the synth look and feel   |||   set border to normal
this implementation does nothing , because the rollover property of the jtool bar class is not used in the synth look and feel   |||   set border to rollover
returns an array of all the objects currently registered as foo listeners upon this abstract table model   |||   get listeners
overrides jcomponent set background to assign the unselected - background color to the specified color   |||   set background
returns the list selection model that is used to maintain column selection state   |||   get selection model
removes a listener for table column model events   |||   remove column model listener
sets whether column selection is allowed   |||   set column selection allowed
adds a column to the model   |||   add column
adds a row to the end of the model   |||   add row
returns the number of rows in this data table   |||   get row count
equivalent to fire table changed   |||   new data available
ensures that the new rows have the correct number of columns   |||   new rows added
get the accessible context associated with this object   |||   get accessible context
returns the column ' s horizontal distance from its original position , if and only if , a drag is in process   |||   get dragged distance
sizes the header and marks it as needing display   |||   resize and repaint
obsolete as of java 2 platform v1 3   |||   set update table in real time
as of java 2 platform v1 3 , this method is not called by the table column constructor   |||   create default header renderer
returns the table cell renderer used to draw the header of the table column   |||   get header renderer
returns the width of the table column   |||   get width
sets the table cell renderer used by jtable to draw individual values for this column   |||   set cell renderer
sets the table cell renderer used to draw the table column ' s header to header renderer   |||   set header renderer
sets the table column ' s identifier to an identifier   |||   set identifier
sets the table column ' s column margin to new margin   |||   set column margin
returns true if the cell at row index and column index is editable   |||   is cell editable
retrieves the underlying model   |||   get document
returns the index of node in the receivers children   |||   get index
gets the parent of the element   |||   get parent element
gets the element name   |||   get name
replaces content with a new set of elements   |||   replace
inserts a string of characters into the sequence   |||   insert string
returns the length of the data   |||   get length
get the paragraph element containing the given position   |||   get paragraph element
updates document structure as a result of text insertion   |||   insert update
acquires a lock to begin reading some state from the document   |||   read lock
sets the asynchronous loading priority   |||   set asynchronous load priority
sets the document filter   |||   set document filter
releases a write lock previously obtained via write lock   |||   write unlock
returns the last offset to be output   |||   get end offset
what is the offset along the minor axis   |||   get minor offset
provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it   |||   model to view
set the right part of the margin around the view   |||   set right inset
sets the size of the view   |||   set size
returns true if this set defines an attribute with the same name and an equal value   |||   contains attribute
are the allocations for the children still valid ?   |||   is allocation valid
invalidates the layout along an axis   |||   layout changed
performs layout for the major axis of the box i e   |||   layout major axis
gets the blink rate of the caret   |||   get blink rate
gets the current caret visual location   |||   get magic caret position
determines if the selection is currently visible   |||   is selection visible
removes a listener that was tracking caret position changes   |||   remove change listener
set the current caret visual location   |||   set magic caret position
sets the visibility of the selection   |||   set selection visible
the real paint behavior occurs naturally from the association that the component has with its parent container the same container hosting this view   |||   paint
gets the right inset   |||   get right inset
called when the component containing the caret loses focus   |||   focus lost
returns an array of all the objects currently registered as foo listeners upon this caret   |||   get listeners
gets the painter for the highlighter   |||   get selection painter
determines if the caret is currently active   |||   is active
renders the caret as a vertical line   |||   paint
cause the caret to be painted   |||   repaint
sets the caret movement policy on the document updates   |||   set update policy
creates an uninitialized text storage model plain document that is appropriate for this type of editor   |||   create default document
gets the mime type of the data that this kit represents support for   |||   get content type
returns the document filter used to restrict the characters that can be input into the jformatted text field   |||   get document filter
sets the jformatted text field abstract formatter to use if the jformatted text field is being edited and either the value is not - null , or the value is null and a null formatter has not been specified   |||   set edit formatter
removes a highlight from the view   |||   remove highlight
gets the element attributes   |||   get attributes
gets the length   |||   get length
sets the direction   |||   set direction
initialize the document to reflect the given element structure i e   |||   create
fetches the logical style assigned to the paragraph represented by the given position   |||   get logical style
called when any of this document ' s styles have changed   |||   style changed
inserts a string of content   |||   insert string
gives notification that something was inserted into the document in a location that this view is responsible for   |||   insert update
update the flow on the given flow view   |||   layout
sets the painter to use for rendering glyphs   |||   set glyph painter
fetches the current list of highlights   |||   get highlights
returns the format that dictates the legal values that can be edited and displayed   |||   get format
adds a new keymap into the keymap hierarchy   |||   add keymap
transfers the currently selected range in the associated text model to the system clipboard , leaving the contents in the text model   |||   copy
notifies all listeners that have registered interest for notification on this event type   |||   fire caret update
fetches the current color used to render the caret   |||   get caret color
fetches the object responsible for making highlights   |||   get highlighter
fetches the current color used to render the selected text   |||   get selected text color
fetches the current color used to render the selection   |||   get selection color
returns the text contained in this text component   |||   get text
fetches the user - interface factory for this text - oriented editor   |||   get ui
a convenience print method that displays a print dialog , and then prints this jtext component in interactive mode with the specified header and footer text   |||   print
sets the current color used to render the selected text   |||   set selected text color
sets the selection end to the specified position   |||   set selection end
fetches the action appropriate for the given symbolic event sequence   |||   get action
fetches the foreground color to use to render the glyphs   |||   get foreground
determines if the glyphs should be underlined   |||   is underline
used by the worker thread to get a new task to execute   |||   wait for work
returns true if string to value should return literal characters in the mask   |||   get value contains literal characters
allows for further restricting of the characters that can be input   |||   set valid characters
moves the caret location , bypassing the navigation filter   |||   move dot
sets the type of justification   |||   set justification
renders the given range in the model as selected text   |||   draw selected text
renders a line of text , suppressing whitespace at the end and expanding any tabs   |||   draw line
returns the tab size set for the document , defaulting to 8   |||   get tab size
repaint the region of change covered by the given document event   |||   update damage
adds an attribute to the list   |||   add attribute
tells whether a given attribute is defined   |||   is defined
gets the bidi level setting   |||   get bidi level
gets the component setting from the attribute list   |||   get component
gets the space above setting   |||   get space above
sets the first line indent   |||   set first line indent
sets the foreground color   |||   set foreground
sets the icon attribute   |||   set icon
returns font metrics for a font   |||   get font metrics
returns the object previously registered with register static attribute key   |||   get static attribute
fetches a named style previously added to the document   |||   get style
changes the name of the style   |||   set name
checks whether the attribute set contains all of the given attributes   |||   contains attributes
returns a string showing the key / value pairs   |||   to string
creates a new table row   |||   create table row
returns the leader of the tab   |||   get leader
fetches the text component that currently has focus   |||   get focused component
determines the ending row model position of the row that contains the specified model position   |||   get row end
determines the end of a word for the given location   |||   get word end
determines the start of a word for the given model location   |||   get word start
forwards the document event to the give child view   |||   forward update to view
get the current setting of the number of zones allowed to be loaded at the same time   |||   get max zones loaded
responsible for processing the action event   |||   action performed
creates a document leaf element that directly represents text doesn ' t have any children   |||   create leaf element
gets the number of tokens to buffer before trying to update the documents element structure   |||   get token threshold
inserts the html specified as a string after the end of the given element   |||   insert after end
inserts the html specified as a string before the start of the given element   |||   insert before start
adds some text with the current character attributes   |||   add content
callback from the parser   |||   handle simple tag
pops a previously pushed character style off the stack to return to a previous style   |||   pop character style
registers a handler for the given tag   |||   register tag
create an uninitialized text storage model that is appropriate for this type of editor   |||   create default document
returns the cursor to use over hyper links   |||   get link cursor
fetch a factory that is suitable for producing views of any models that are produced by this kit   |||   get view factory
this is invoked when inserting at a boundary   |||   insert at boundary
calls link activated on the associated jeditor pane if the given position represents a link   |||   activate link
determines if the html tag associated with the element is a block tag   |||   is block tag
returns the text to display if the image can ' t be loaded   |||   get alt text
sets how the image is loaded   |||   set loads synchronously
determines the preferred span for this view   |||   get preferred span
paints the css box according to the attributes given   |||   paint
adds the rules from the style sheet ss to those of the receiver   |||   add style sheet
creates a compact set of attributes that might be shared   |||   create small attribute set
fetches the font to use for the given set of attributes   |||   get font
sets the base font size from the passed in string   |||   set base font size
handle start tag   |||   handle start tag
handle text   |||   handle text
creates and returns a character entity   |||   def entity
get an attribute by name   |||   get attribute
get index   |||   get index
return true if the end tag can be omitted   |||   omit end
returns true if it is a parameter entity   |||   is parameter
called when an end tag is encountered   |||   handle end tag
insert content from the given stream , which will be treated as plain text   |||   read
returns the preferred width for the passed in region   |||   get preferred width
overridden to make clone public   |||   clone
returns the next sibling of this node in the parent ' s children array   |||   get next sibling
returns the leaf before this node or null if this node is the first leaf in the tree   |||   get previous leaf
returns the node that precedes this node in a preorder traversal of this node ' s tree   |||   get previous node
returns the previous sibling of this node in the parent ' s children array   |||   get previous sibling
removes the child at the specified index from this node ' s children and sets that node ' s parent to null   |||   remove
removes achild from this node ' s child array , giving it a null parent   |||   remove
sets this node ' s parent to new parent but does not change the parent ' s child array   |||   set parent
returns the result of sending to string to this node ' s user object , or the empty string if the node has no user object   |||   to string
overrides jcomponent get border to returns the current border   |||   get border
overrides container paint to paint the node ' s icon and use the selection color for the background   |||   paint
returns true if event is null , or it is a mouse event with a click count > 2 and in hit region returns true   |||   can edit immediately
returns the color the border is drawn   |||   get border selection color
configures the editor   |||   get tree cell editor component
removes the previously added cell editor listener   |||   remove cell editor listener
returns true if event is a mouse event and the click count is 1   |||   should start editing timer
returns the icon used to represent non - leaf nodes that are not expanded   |||   get closed icon
returns the default icon , for the current laf , that is used to represent non - leaf nodes that are not expanded   |||   get default closed icon
overrides jcomponent get preferred size to return slightly wider preferred size value   |||   get preferred size
adds a listener for the tree model event posted after the tree changes   |||   add tree model listener
returns an array of all the tree model listeners registered on this model   |||   get tree model listeners
message this to remove node from its parent   |||   remove node from parent
adds x to the list of listeners that are notified each time the set of selected tree paths changes   |||   add tree selection listener
returns the first path in the selection   |||   get selection path
returns the selection   |||   get selection paths
removes x from the list of listeners that are notified each time the set of selected tree paths changes   |||   remove tree selection listener
returns get presentation name from the last undoable edit added to edits   |||   get presentation name
returns get undo presentation name from the last undoable edit added to edits   |||   get undo presentation name
returns true if this edit is in progressthat is , it has not received end   |||   is in progress
sends redo to all contained undoable edits in the order in which they were added   |||   redo
tells the edited object to apply the state prior to the edit   |||   undo
called only from begin update   |||   create compound edit
removes edits in the specified range   |||   trim edits
convenience method that invokes one of undo or redo   |||   undo or redo
gets the source object associated with this diagnostic   |||   get source
deletes this file object   |||   delete
gets a reader for this object   |||   open reader
gets a file object for input representing the specified relative name in the specified package in the given location   |||   get file for input
infers a binary name of a file object based on a location   |||   infer binary name
this implementation returns 0l   |||   get last modified
this implementation always throws unsupported operation exception   |||   open input stream
gets file objects representing the given files   |||   get java file objects
compares two file objects and return true if they represent the same canonical file , zip file entry , or entry in any file system based container   |||   is same file
tells the resource manager to forget about a heuristically completed transaction branch   |||   forget
obtain the transaction branch identifier part of xid as an array of bytes   |||   get branch qualifier
converts the string argument into a byte value   |||   parse byte
converts the string argument into a float value   |||   parse float
convert the string argument into an int value   |||   parse int
converts a big integer value into a string   |||   print integer
converts a long value into a string   |||   print unsigned int
create a marshaller object that can be used to convert a java content tree into xml data   |||   create marshaller
add a linked exception   |||   set linked exception
return unmarshaller listener registered with this unmarshaller   |||   get listener
register unmarshal event callback unmarshaller listener with this unmarshaller   |||   set listener
set the particular property in the underlying implementation of unmarshaller   |||   set property
unmarshal xml data from the specified reader and return the resulting content tree   |||   unmarshal
unmarshal xml data from the specified xml source by declared type and return the resulting content tree   |||   unmarshal
obtains the unmarshalled result   |||   get result
retrieve the linked exception for this warning / error   |||   get linked exception
retrieve the text message for this warning / error   |||   get message
retrieve the severity code for this warning / error   |||   get severity
convert a bound type to a value type   |||   marshal
replace any tab , cr , and lf by a whitespace character ' ' , as specified in the whitespace facet ' replace '   |||   unmarshal
consider binary data for optimized binary storage as an attachment   |||   add mtom attachment
by default , the get node method is unsupported and throw an unsupported operation exception   |||   get node
convenience method for setting the fragment flag   |||   set fragment
convenience method for setting the no namespace schema location   |||   set no nss chema location
specifies whether or not the unmarshaller should validate during unmarshal operations   |||   set validating
returns a string representation of this object in a format helpful to debugging   |||   to string
returns the selected key   |||   get key
returns the cause of this no such mechanism exception or null if the cause is nonexistent or unknown   |||   get cause
returns the uri of the referenced data object   |||   get uri
returns the value to which this context maps the specified key   |||   get
sets the base uri   |||   set base uri
sets the default namespace prefix   |||   set default namespace prefix
sets the specified property   |||   set property
returns the element with the specified id attribute value   |||   get element by id
returns the calculated digest value of this reference after a validation operation   |||   get calculated digest value
returns the algorithm - specific input parameters of this signature method   |||   get parameter spec
returns an unmodifiable list of one or more signature propertys that are contained in this signature properties   |||   get properties
prints this transform exception , its backtrace and the cause ' s backtrace to the specified print writer   |||   print stack trace
returns the encoding uri of this xml object   |||   get encoding
creates a reference with the specified parameters and pre - calculated digest value   |||   new reference
returns a key info factory that supports the specified xml processing mechanism and representation type ex : " dom "   |||   get instance
unmarshals a new key info instance from a mechanism - specific xml structure ex : dom structure instance   |||   unmarshal key info
dereferences the key info information referenced by this retrieval method and applies the specified transforms   |||   dereference
obtain a new instance of a duration specifying the duration as is positive , years , months , days , hours , minutes , seconds   |||   new duration
adds this duration to a calendar object   |||   add to
partial order relation comparison with this duration instance   |||   compare
unset all fields to undefined   |||   clear
compare two instances of w3c xml schema 1 0 date / time datatypes according to partial order relation defined in w3c xml schema 1 0 part 2 , section 3 2 7 3 , order relation on date time   |||   compare
return minutes or datatype constants field undefined   |||   get minute
set seconds   |||   set second
get the prefix of this qname   |||   get prefix
string representation of this qname   |||   to string
get the state of the named feature   |||   get feature
indicates whether or not the factory is configured to produce parsers which converts cdata nodes to text nodes and appends it to the adjacent if any text node   |||   is coalescing
allows the user to set specific attributes on the underlying implementation   |||   set attribute
specifies that the parser produced by this code will provide support for xml namespaces   |||   set namespace aware
set state of xinclude processing   |||   set xi nclude aware
reset this sax parser to its original configuration   |||   reset
gets the content of this attachment part object as an input stream as if a call had been made to get content and no data content handler had been registered for the content - type of this attachment part   |||   get raw content
sets the mime header whose name is " content - id " with the given value   |||   set content id
creates a new message factory object that is an instance of the default implementation soap 1 1 , this method uses the following ordered lookup procedure to determine the message factory implementation class to load : use the javax xml soap message factory system property   |||   new instance
creates a new message factory object that is an instance of the specified implementation   |||   new instance
notifies the implementation that this node object is no longer being used by the application and that the implementation is free to reuse this object for nodes that may be created later   |||   recycle node
creates a new soap body element object with the specified name and adds it to this soap body object   |||   add body element
creates an instance of the default soap connection factory object   |||   new instance
adds an attribute with the specified name and value to this soap element object   |||   add attribute
creates a new soap element object initialized with the specified local name and adds the new element to this soap element object   |||   add child element
adds a namespace declaration with the specified prefix and uri to this soap element object   |||   add namespace declaration
creates a qname whose namespace uri is the one associated with the parameter , prefix , in the context of this soap element   |||   create qn ame
returns the value of the attribute with the specified name   |||   get attribute value
returns the uri of the namespace that has the given prefix   |||   get namespace uri
returns an iterator over the namespace prefix strings visible to this element   |||   get visible namespace prefixes
creates a soap body object and sets it as the soap body object for this soap envelope object   |||   add body
creates a new name object initialized with the given local name , namespace prefix , and namespace uri   |||   create name
returns the detail message for this soap exception object   |||   get message
creates a new detail object which serves as a container for detail entry objects   |||   create detail
returns the optional node element value for this soap fault object   |||   get fault node
sets this soap fault object with the given fault actor   |||   set fault actor
creates or replaces any existing node element value for this soap fault object   |||   set fault node
sets the fault string for this soap fault object to the given string   |||   set fault string
creates a new soap header element object initialized with the specified name and adds it to this soap header object   |||   add header element
creates a new upgrade soap header element object initialized with the specified supported soap uri and adds it to this soap header object   |||   add upgrade header element
returns the boolean value of the relay attribute for this soap header element   |||   get relay
sets the must understand attribute for this soap header element object to be either true or false   |||   set must understand
sets the role associated with this soap header element object to the specified role   |||   set role
gets all the values of the mime header object in this soap part object that is identified by the given string   |||   get mime header
sets the content of the soap envelope object with the data from the given source object   |||   set content
return the line number where the current event ends , returns - 1 if none is available   |||   get line number
tests whether the current state is part of this stream   |||   accept
create a characters event with the is space flag set to true   |||   create space
creates a new instance of the factory in exactly the same manner as the new factory method   |||   new instance
reads the content of a text - only element   |||   get element text
get the next xml event   |||   next event
query the set of properties that this factory supports   |||   is property supported
set a user defined event allocator for events   |||   set event allocator
returns the prefix of this attribute at the provided index   |||   get attribute prefix
returns a qname for the current start element or end element event   |||   get name
get the data section of a processing instruction   |||   get pid ata
gets the text associated with a characters , space or cdata event   |||   get text characters
returns a boolean which indicates if this attribute was created by default   |||   is attribute specified
returns true if the cursor points to a character data event that consists of all whitespace   |||   is white space
closes any start tags and writes corresponding end tags   |||   write end document
returns true if this set of characters is all whitespace   |||   is white space
the entity ' s public identifier , or null if none was given   |||   get public id
a utility function to check if this event is a processing instruction   |||   is processing instruction
set the system identifier for this source   |||   set system id
clear all parameters set with set parameter   |||   clear parameters
get the error event handler in effect for the transformation   |||   get error listener
get an object that will be used to resolve ur is used in document   |||   get urir esolver
get the error event handler for the transformer factory   |||   get error listener
set the node that will represents a source dom tree   |||   set node
set the sax2 lexical handler for the output   |||   set lexical handler
set the base id uri or system id from where relative ur ls will be resolved   |||   set system id
get the system identifier used by this st ax source   |||   get system id
get the character stream that was set with set writer   |||   get writer
set the system id from a file reference   |||   set system id
set a feature for this schema factory , schemas created by this factory , and by extension , validators and validator handlers created by those schemas   |||   set feature
returns the endpoint reference associated with this binding provider instance   |||   get endpoint reference
sets the executor for this endpoint instance   |||   set executor
this gives list of endpoints in an application   |||   get endpoints
gets the message payload as an xml source , may be called multiple times on the same logical message instance , always returns a new source that may be used to retrieve the entire message payload   |||   get payload
invokes an operation occording to the contents of the request message   |||   invoke
get the unique identifier for this web service feature   |||   get id
gets the contained response context   |||   get context
returns the configured handler resolver   |||   get handler resolver
sets the scope of a property   |||   set scope
returns an attribute value for container ' s configuration and other data that can be used by jax - ws runtime   |||   get attribute
returns the unresolved local address on which the request was received   |||   get local address
returns the extra path information that follows the web service path but precedes the query string in the request uri and will start with a " / " character   |||   get path info
returns a stream to which the response body must be written   |||   get response body
indicates whether an authenticated user is included in the specified logical " role "   |||   is user in role
find a function in the set of available functions   |||   resolve function
determines if data confidentiality is available over the context   |||   get conf state
used to determine limits on the size of the message that can be passed to wrap   |||   get wrap size limit
used during context establishment to determine the state of the context   |||   is established
determines if the context is transferable to other processes through the use of the export method   |||   is transferable
requests that data confidentiality be enabled for the wrap method   |||   request conf
requests that the initiator ' s credentials be delegated to the acceptor during context establishment   |||   request cred deleg
used to process tokens generated by the wrap method on the other side of the context   |||   unwrap
verifies the cryptographic mic , contained in the token parameter , over the supplied message   |||   verify mic
uses streams to verify the cryptographic mic , contained in the token parameter , over the supplied message   |||   verify mic
returns the lifetime in seconds for the credential to remain capable of accepting security contexts using the specified mechanism   |||   get remaining accept lifetime
factory method for creating a context on the initiator ' s side   |||   create context
returns a list of mechanisms that support the indicated name type   |||   get mechs for name
creates a name that is canonicalized for some mechanism   |||   canonicalize
creates an input stream from which this any object ' s value can be unmarshalled   |||   create input stream
extracts the char in this any object ' s value field   |||   extract char
extracts the java math big decimal object in this any object ' s value field   |||   extract fixed
deprecated deprecated by corba 2 2   |||   extract principal
extracts the int in this any object ' s value field   |||   extract ulong
extracts the char in this any object ' s value field   |||   extract wchar
inserts the given int into this any object ' s value field   |||   insert long
inserts the given org omg corba object object into this any object ' s value field   |||   insert object
returns type information for the element contained in this any object   |||   type
writes out the value of this any object to the given output stream   |||   write value
returns the string object at the given index   |||   item
reads an idl character value from the input stream   |||   read char
reads an idl long from the input stream   |||   read longlong
writes the idl float value to the output stream   |||   write float
writes the array of idl longs from offset for length elements to the output stream   |||   write long array
writes the array of idl shorts from offset for length elements to the output stream   |||   write short array
writes the array of idl unsigned long longs represented as java longs from offset for length elements to the output stream   |||   write ulonglong array
writes the idl value type value to the output stream   |||   write value
writes the idl wide character value to the output stream   |||   write wchar
this returns the policy of the specified type for objects in this domain   |||   get domain policy
read a double value from the input stream and store it in the value member   |||   read
read a float from an input stream and initialize the value member with the float value   |||   read
always returns false   |||   non existent
returns the number of named value objects that have been added to this nv list object   |||   count
creates a type code object representing an idl array   |||   create array tc
creates an empty exception list object   |||   create exception list
create a type code object for an idl fixed type   |||   create fixed tc
creates a type code object representing an idl sequence   |||   create sequence tc
gets the next request instance for which a response has been received   |||   get next response
retrieves the type code object that represents the given primitive idl type   |||   get primitive tc
this operation blocks the current thread until the orb has completed the shutdown process , initiated when some thread calls shutdown   |||   run
allows the orb implementation to be initialized with the given parameters and properties   |||   set parameters
deprecated deprecated by corba 2 2   |||   name
adds an output argument to this request object   |||   add out arg
retrieves the environment object for this request   |||   env
makes a synchronous invocation using the information in the request object   |||   invoke
retrieves the target object reference   |||   target
converts the given int to the corresponding tc kind instance   |||   from int
compares this type code object with the given one , testing for equality   |||   equal
returns the scale of the fixed type described by this type code object   |||   fixed scale
returns the number of elements in the type described by this type code object   |||   length
retrieves the number of members in the type described by this type code object   |||   member count
marshals to output the value in this type code holder object   |||   write
returns the input stream from which the exception data can be read as its parameters   |||   get input stream
determines if the two object references are equivalent   |||   is equivalent
returns true if this object is implemented by a local servant   |||   is local
reads a string value from this input stream   |||   read string
returns a duplicate of this object impl object   |||   duplicate
retrieves a list of the domain managers for this object impl object   |||   get domain managers
checks whether the object identified by the given repository identifier is an object impl object   |||   is a
returns the hash code for this object impl object   |||   hash code
writes an array of booleans on this output stream   |||   write boolean array
writes a corba context on this stream   |||   write context
writes an array of floats on this output stream   |||   write float array
writes an array of corba longlongs i e   |||   write longlong array
writes a corba object on this output stream   |||   write object
writes a short value to this stream   |||   write short
writes a wide char value to this stream   |||   write wchar
the start value method ends any currently open chunk , writes a valuetype header for a nested custom valuetype with a null codebase and the specified repository id , and increments the valuetype nesting depth   |||   start value
marshals a value type to the output stream   |||   write value
destroys a dyn any object   |||   destroy
extracts an any value contained in the any represented by this dyn any   |||   get any
extracts the char value from this dyn any   |||   get char
inserts a char value into the dyn any   |||   insert char
returns the current discriminator value   |||   get discriminator
returns true if the union has no active member , that is , the unions value consists solely of its discriminator because the discriminator has a value that is not listed as an explicit case label   |||   has no active member
returns the currently active member   |||   member
sets the discriminator to a value that is consistent with the value of the default case of a union   |||   set to default member
returns true if the dyn value common represents a null value type   |||   is null
returns a sequence of name dyn any pairs describing the name and the value of each member in the value type   |||   get members as dyn any
returns a sequence of name value pairs describing the name and the value of each member in the value type   |||   get members
create a codec of the given encoding   |||   create codec
decodes the given byte array into an any based on the encoding format effective for this codec   |||   decode
sets data in a slot   |||   set slot
return the adapter manager id of the object adapter that was just created and is running ior interceptors   |||   manager id
called whenever the state of an adapter manager changes   |||   adapter manager state changed
returns the arguments passed to orb init   |||   arguments
identical to orb register initial reference   |||   register initial reference
returns an array of string objects describing the contexts that may be passed on this operation invocation   |||   contexts
returns the name of the operation being invoked   |||   operation
allows an interceptor to query the exception information and modify the reply service context before the exception is thrown to the client   |||   send exception
allows an interceptor to query reply information and modify the reply service context after the target operation has been invoked and before the reply is returned to the client   |||   send reply
specifies the policy value   |||   value
this operation returns the state of the poa manager   |||   get state
these operations each return a reference to a policy object with the specified value   |||   create servant retention policy
this operation causes the object id specified in the oid parameter to be deactivated   |||   deactivate object
if the target poa is the parent of a child poa with the specified name relative to the target poa , that child poa is returned   |||   find poa
if an object with the specified object id value is currently active , a reference encapsulating the information used to activate the object is returned   |||   id to reference
if the poa has the retain policy and the specified object id is in the active object map , this operation returns the servant associated with that object in the active object map   |||   id to servant
checks to see if the specified repository id is present on the list returned by all interfaces or is the repository id for the generic corba object   |||   is a
this method checks to see if the specified repid is present on the list returned by all interfaces or is the repository id for the generic corba object   |||   is a
append the string to the end of the character data of the node   |||   append data
remove a range of 16 - bit units from the node   |||   delete data
a dom string indicating which related data is expected in related data   |||   get type
the number of dom implementations in the list   |||   get length
the uri this locator is pointing to , or null if no uri is available   |||   get uri
the utf - 16 , as defined in and amendment 1 of , offset into the input source this locator is pointing to or - 1 if there is no utf - 16 offset available   |||   get utf 16 offset
returns a node list of all the descendant elements with a given local name and namespace uri in document order   |||   get elements by tag name ns
this method returns a specialized object which implements the specialized ap is of the specified feature and version , as specified in   |||   get feature
the last child of this node   |||   get last child
tests whether two nodes are equal   |||   is equal node
look up the namespace uri associated to the given prefix , starting from this node   |||   lookup namespace uri
the value of this node , depending on its type ; see the table above   |||   set node value
the public identifier of this notation   |||   get public id
returns whether this text node contains element content whitespace , often abusively called " ignorable whitespace "   |||   is element content whitespace
used to indicate whether or not an event is a bubbling event   |||   get bubbles
this method allows the registration of event listeners on the event target   |||   add event listener
this method allows the dispatch of events into the implementations event model   |||   dispatch event
attr name indicates the name of the changed attr node in a dom attr modified event   |||   get attr name
the view attribute identifies the abstract view from which the event was generated   |||   get view
an attribute of a language and binding dependent type that represents a stream of 16 - bit units   |||   get character stream
the character encoding to use for the output   |||   get encoding
true if the ls parser is currently busy loading a document , otherwise false   |||   get busy
parse an xml fragment from a resource identified by a ls input and insert the content into an existing document at the position specified with the context and action arguments   |||   parse with context
the parser will call this method after each element start tag has been scanned , but before the remainder of the element is processed   |||   start element
look up an attribute ' s value by namespace name   |||   get value
receive notification of character data   |||   characters
receive notification of a processing instruction   |||   processing instruction
receive notification of the beginning of a document   |||   start document
set the system identifier for this input source   |||   set system id
return the column number where the current document event ends   |||   get column number
add an attribute to the end of the list , setting its " specified " flag to true   |||   add attribute
remove an attribute from the list   |||   remove attribute
report an xml comment anywhere in the document   |||   comment
report the end of a cdata section   |||   end cdata
tells the parser that if no external subset has been declared in the document text , none should be used   |||   get external subset
report the start of a cdata section   |||   start cdata
returns the current value of the encoding property   |||   get encoding
set the local name of a specific attribute   |||   set local name
set the type of a specific attribute   |||   set type
receive notification of the start of a namespace mapping   |||   start prefix mapping
return the saved column number 1 - based   |||   get column number
return the saved line number 1 - based   |||   get line number
set the column number for this locator 1 - based   |||   set column number
set the system identifier for this locator   |||   set system id
declare a namespace prefix   |||   declare prefix
set the dtd handler   |||   set dtdh andler
set a feature flag for the parser   |||   set feature
get the current dtd event handler   |||   get dtdh andler
get the current error event handler   |||   get error handler
filter a notation declaration event   |||   notation decl
set the error event handler   |||   set error handler
filter a warning event   |||   warning
adapt a sax2 end prefix mapping event   |||   end prefix mapping
specifies some detail information about the event , depending on the type of event   |||   get detail
the init ui event method is used to initialize the value of a ui event created through the document event interface   |||   init uie vent
create a new empty input source object where ls input character stream , ls input byte stream , ls input string data ls input system id , ls input public id , ls input base uri , and ls input encoding are null , and ls input certified text is false   |||   create lsi nput
create a new empty output destination object where ls output character stream , ls output byte stream , ls output system id , ls output encoding are null   |||   create lso utput
create a new ls parser   |||   create lsp arser
create a new ls serializer object   |||   create lss erializer
the base uri to be used see section 5 1 4 in for resolving a relative system id to an absolute uri   |||   get base uri
an attribute of a language and binding dependent type that represents a stream of bytes   |||   get byte stream
if set to true , assume that the input is certified see section 2 13 in when parsing   |||   get certified text
the character encoding , if known   |||   get encoding
the public identifier for this input source   |||   get public id
string data to parse   |||   get string data
the system identifier , a uri reference , for this input source   |||   get system id
the base uri to be used see section 5 1 4 in for resolving a relative system id to an absolute uri   |||   set base uri
an attribute of a language and binding dependent type that represents a stream of bytes   |||   set byte stream
if set to true , assume that the input is certified see section 2 13 in when parsing   |||   set certified text
the character encoding , if known   |||   set encoding
the public identifier for this input source   |||   set public id
the system identifier , a uri reference , for this input source   |||   set system id
the input source that was parsed   |||   get input
the document that finished loading   |||   get new document
an attribute of a language and binding dependent type that represents a writable stream of bytes   |||   get byte stream
an attribute of a language and binding dependent type that represents a writable stream to which 16 - bit units can be output   |||   get character stream
the system identifier , a uri reference , for this output destination   |||   get system id
an attribute of a language and binding dependent type that represents a writable stream of bytes   |||   set byte stream
an attribute of a language and binding dependent type that represents a writable stream to which 16 - bit units can be output   |||   set character stream
the character encoding to use for the output   |||   set encoding
abort the loading of the document that is currently being loaded by the ls parser   |||   abort
true if the ls parser is asynchronous , false if it is synchronous   |||   get async
the dom configuration object used when parsing an input source   |||   get dom config
when a filter is provided , the implementation will call out to the filter as it is constructing the dom tree structure   |||   get filter
parse an xml document from a resource identified by a ls input   |||   parse
parse an xml document from a location identified by a uri reference   |||   parse uri
when a filter is provided , the implementation will call out to the filter as it is constructing the dom tree structure   |||   set filter
the input source that is being parsed   |||   get input
the current position in the input source , including all external entities and other resources that have been read   |||   get position
the total size of the document including all external resources , this number might change as a document is being parsed if references to more external resources are seen   |||   get total size
allow the application to resolve external resources   |||   resolve resource
the dom configuration object used by the ls serializer when serializing a dom node   |||   get dom config
when the application provides a filter , the serializer will call out to the filter before serializing each node   |||   get filter
the end - of - line sequence of characters to be used in the xml being written out   |||   get new line
when the application provides a filter , the serializer will call out to the filter before serializing each node   |||   set filter
the end - of - line sequence of characters to be used in the xml being written out   |||   set new line
serialize the specified node as described above in the general description of the ls serializer interface   |||   write
a convenience method that acts as if ls serializer write was called with a ls output with no encoding specified and ls output system id set to the uri argument   |||   write to uri
tells the ls serializer what types of nodes to show to the filter   |||   get what to show
the source document view of which this is an abstract view   |||   get document
the default abstract view for this document , or null if none available   |||   get default view
look up the index of an attribute by xml qualified prefixed name   |||   get index
look up the index of an attribute by namespace name   |||   get index
return the number of attributes in the list   |||   get length
look up an attribute ' s local name by index   |||   get local name
look up an attribute ' s xml qualified prefixed name by index   |||   get qn ame
look up an attribute ' s type by index   |||   get type
look up an attribute ' s type by xml qualified prefixed name   |||   get type
look up an attribute ' s type by namespace name   |||   get type
look up an attribute ' s namespace uri by index   |||   get uri
look up an attribute ' s value by xml qualified prefixed name   |||   get value
receive notification of the end of an element   |||   end element
end the scope of a prefix - uri mapping   |||   end prefix mapping
receive an object for locating the origin of sax document events   |||   set document locator
receive notification of a skipped entity   |||   skipped entity
receive notification of the beginning of an element   |||   start element
receive notification of a notation declaration event   |||   notation decl
receive notification of an unparsed entity declaration event   |||   unparsed entity decl
allow the application to resolve external entities   |||   resolve entity
get the character stream for this input source   |||   get character stream
get the character encoding for a byte stream or uri   |||   get encoding
set the character stream for this input source   |||   set character stream
set the public identifier for this input source   |||   set public id
return the embedded exception , if any   |||   get exception
return a detail message for this exception   |||   get message
override to string to pick up any embedded exception   |||   to string
the line number of the end of the text where the exception occurred   |||   get line number
get the public identifier of the entity where the exception occurred   |||   get public id
get the system identifier of the entity where the exception occurred   |||   get system id
override to string to provide more detailed error message   |||   to string
get the parent reader   |||   get parent
set the parent reader   |||   set parent
return the current content handler   |||   get content handler
return the current entity resolver   |||   get entity resolver
return the current error handler   |||   get error handler
parse an xml document from a system identifier uri   |||   parse
allow an application to register a content event handler   |||   set content handler
allow an application to register an entity resolver   |||   set entity resolver
allow an application to register an error event handler   |||   set error handler
returns false unless the attribute was declared in the dtd   |||   is declared
returns true unless the attribute value was provided by dtd defaulting   |||   is specified
returns the current value of the attribute ' s " declared " flag   |||   is declared
returns the current value of an attribute ' s " specified " flag   |||   is specified
copy an entire attributes object   |||   set attributes
assign a value to the " declared " flag of a specific attribute   |||   set declared
assign a value to the " specified " flag of a specific attribute   |||   set specified
report an attribute type declaration   |||   attribute decl
report an element type declaration   |||   element decl
report an internal entity declaration   |||   internal entity decl
report the end of dtd declarations   |||   end dtd
invokes entity resolver2 resolve entity with null entity name and base uri   |||   resolve entity
report the start of dtd declarations , if any   |||   start dtd
report the beginning of some internal and external xml entities   |||   start entity
allows applications to provide an external subset for documents that don ' t explicitly define one   |||   get external subset
allows applications to map references to external entities into input sources , or tell the parser it should use conventional uri resolution   |||   resolve entity
returns the name of the character encoding for the entity   |||   get encoding
returns the version of xml used for the entity   |||   get xmlv ersion
returns the current value of the version property   |||   get xmlv ersion
assigns the current value of the encoding property   |||   set encoding
add an attribute to the end of the list   |||   add attribute
clear the attribute list for reuse   |||   clear
look up an attribute ' s index by qualified prefixed name   |||   get index
look up an attribute ' s index by namespace name   |||   get index
return an attribute ' s local name   |||   get local name
return an attribute ' s qualified prefixed name   |||   get qn ame
return an attribute ' s type by index   |||   get type
look up an attribute ' s type by qualified prefixed name   |||   get type
look up an attribute ' s type by namespace - qualified name   |||   get type
return an attribute ' s namespace uri   |||   get uri
look up an attribute ' s value by qualified prefixed name   |||   get value
set the qualified name of a specific attribute   |||   set qn ame
set the namespace uri of a specific attribute   |||   set uri
set the value of a specific attribute   |||   set value
receive notification of the end of the document   |||   end document
receive notification of the end of a namespace mapping   |||   end prefix mapping
receive notification of a recoverable parser error   |||   error
report a fatal xml parsing error   |||   fatal error
receive notification of a notation declaration   |||   notation decl
resolve an external entity   |||   resolve entity
receive a locator object for document events   |||   set document locator
receive notification of the beginning of the document   |||   start document
receive notification of the start of an element   |||   start element
receive notification of an unparsed entity declaration   |||   unparsed entity decl
receive notification of a parser warning   |||   warning
return the saved public identifier   |||   get public id
return the saved system identifier   |||   get system id
set the line number for this locator 1 - based   |||   set line number
return an enumeration of all prefixes declared in this context   |||   get declared prefixes
return an enumeration of all prefixes for a given uri whose declarations are active in the current context   |||   get prefixes
look up a prefix and get the currently - mapped namespace uri   |||   get uri
returns true if namespace declaration attributes are placed into a namespace   |||   is namespace decl uris
revert to the previous namespace context   |||   pop context
process a raw xml qualified name , after all declarations in the current context have been handled by declare prefix   |||   process name
reset this namespace support object for reuse   |||   reset
controls whether namespace declaration attributes are placed into the nsdecl namespace by process name   |||   set namespace decl uris
adapter implementation method ; do not call   |||   characters
adapter implementation method ; do not call   |||   end document
adapter implementation method ; do not call   |||   end element
check a parser feature flag   |||   get feature
get a parser property   |||   get property
adapter implementation method ; do not call   |||   ignorable whitespace
adapter implementation method ; do not call   |||   processing instruction
set the content handler   |||   set content handler
adapter implementation method ; do not call   |||   set document locator
set the error handler   |||   set error handler
set a parser property   |||   set property
adapter implementation method ; do not call   |||   start document
adapter implementation method ; do not call   |||   start element
filter a character data event   |||   characters
filter an end document event   |||   end document
filter an end element event   |||   end element
filter an end namespace prefix mapping event   |||   end prefix mapping
filter an error event   |||   error
filter a fatal error event   |||   fatal error
get the content event handler   |||   get content handler
get the current entity resolver   |||   get entity resolver
filter an ignorable whitespace event   |||   ignorable whitespace
parse a document   |||   parse
filter a processing instruction event   |||   processing instruction
filter an external entity resolution   |||   resolve entity
set the content event handler   |||   set content handler
filter a new document locator event   |||   set document locator
set the dtd event handler   |||   set dtdh andler
set the value of a feature   |||   set feature
filter a skipped entity event   |||   skipped entity
filter a start document event   |||   start document
filter a start element event   |||   start element
filter a start namespace prefix mapping event   |||   start prefix mapping
filter an unparsed entity declaration event   |||   unparsed entity decl
adapt a sax2 end element event   |||   end element
adapt a sax2 ignorable whitespace event   |||   ignorable whitespace
parse the document   |||   parse
register the sax1 document event handler   |||   set document handler
set a document locator   |||   set document locator
register the dtd event handler   |||   set dtdh andler
register the entity resolver   |||   set entity resolver
register the error event handler   |||   set error handler
set the locale for error reporting   |||   set locale
adapt a sax2 skipped entity event   |||   skipped entity
start document event   |||   start document
adapt a sax2 start element event   |||   start element
adapt a sax2 start prefix mapping event   |||   start prefix mapping
attempt to create an xml reader from system defaults   |||   create xmlr eader
attempt to create an xml reader from a class name   |||   create xmlr eader
